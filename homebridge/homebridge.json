[
    {
        "id": "26ae44e5b7c93490",
        "type": "tab",
        "label": "HOMEBRIDGE",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2c9ace3317720eb5",
        "type": "group",
        "z": "26ae44e5b7c93490",
        "name": "ADD DEVICES TO HOMEBRIDGE",
        "style": {
            "label": true
        },
        "nodes": [
            "bd5fb140f1df1469",
            "1884c5bdfc24fc42",
            "aac1fc1a2ab90063",
            "09df32bee7a3f35e",
            "ba4c8cead7776662",
            "8be165ddae34b0bb",
            "36b5bc44888c7bc9",
            "52a84909e444f420",
            "d0be896fdde1bd1f",
            "e207718cbd0f60ed",
            "6b64fe5451b0b6c4"
        ],
        "x": 94,
        "y": 191.5,
        "w": 902,
        "h": 129.5
    },
    {
        "id": "6807bfe666d01630",
        "type": "group",
        "z": "26ae44e5b7c93490",
        "name": "HANDLE SET REQUESTS",
        "style": {
            "label": true
        },
        "nodes": [
            "e1e13a24a59ed36b",
            "23969a067bcf4fe0",
            "c9133e258da4f402",
            "55e7dd8a0307733d",
            "d7fb72fdaf32ced6",
            "579eaeccae04addb"
        ],
        "x": 94,
        "y": 339,
        "w": 582,
        "h": 182
    },
    {
        "id": "713a3b946477d176",
        "type": "group",
        "z": "26ae44e5b7c93490",
        "name": "OPTIONAL SETTINGS",
        "style": {
            "label": true
        },
        "nodes": [
            "84adcc70aa2bd2e0",
            "78b24175d17ab027"
        ],
        "x": 94,
        "y": 79,
        "w": 252,
        "h": 82
    },
    {
        "id": "1884c5bdfc24fc42",
        "type": "file in",
        "z": "26ae44e5b7c93490",
        "g": "2c9ace3317720eb5",
        "name": "get config",
        "filename": "/var/lib/homebridge/config.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 400,
        "y": 240,
        "wires": [
            [
                "aac1fc1a2ab90063"
            ]
        ]
    },
    {
        "id": "aac1fc1a2ab90063",
        "type": "json",
        "z": "26ae44e5b7c93490",
        "g": "2c9ace3317720eb5",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 505,
        "y": 240,
        "wires": [
            [
                "6b64fe5451b0b6c4",
                "bd5fb140f1df1469"
            ]
        ],
        "l": false
    },
    {
        "id": "bd5fb140f1df1469",
        "type": "function",
        "z": "26ae44e5b7c93490",
        "g": "2c9ace3317720eb5",
        "name": "Add devices",
        "func": "var replaceAragonOnly = flow.get(\"replaceAragonOnly\"); // See optional settings\nif (replaceAragonOnly === undefined) {\n    replaceAragonOnly = false;\n}\nvar addLeadingNumbers = flow.get(\"addLeadingNumbers\"); // See optional settings\nif (addLeadingNumbers === undefined) {\n    addLeadingNumbers = true;\n}\nnode.warn(\"addLeadingNumbers: \"+addLeadingNumbers);\n\nvar module = global.get(\"module\");\nvar devices = module.settingsGetValue(\"msgDeviceList\");\n\n// Ensure there's an accessories array\nif (!msg.payload.accessories) {\n    msg.payload.accessories = [];\n}\n\nnode.warn(\"Number of Homebridge accessories before: \" + msg.payload.accessories.length);\n\nif(replaceAragonOnly){\n    msg.payload.accessories = msg.payload.accessories.filter(item => !(item.aragon));\n} else {\n    msg.payload.accessories = msg.payload.accessories.filter(item => !(item.accessory = \"mqttthing\"));\n}\n\nvar zoneNumbers = {};\nvar currentNumber = 1;\n\n// Enumerate devices and create accessories for dimmers\ndevices.forEach(function(device) {\n // If the zone is not in zoneNumbers, add it and initialize its number to 1\n    if (!zoneNumbers.hasOwnProperty(device.zone)) {\n        zoneNumbers[device.zone] = currentNumber++;\n    }\n\n    // Get the unique number for the zone and increment it for the next device in the same zone\n    var zoneNumber = zoneNumbers[device.zone];\n    \n    // Pad the zoneNumber with a leading zero if it's less than 10\n    var paddedZoneNumber = \"\";\n    if(addLeadingNumbers){\n        paddedZoneNumber = zoneNumber.toString().padStart(2, '0') + \" \";\n    }\n\n    // Add the paddedZoneNumber at the beginning of the id string\n    var id = paddedZoneNumber + device.zone + \" - \" + device.object;\n    \n    var data = { \n        \"aragon\": { \n            \"type\": device.type,\n            \"object\": device.object,\n            \"zone\": device.zone\n        }\n    };\n\n    if (device.type === \"dimmers\") {\n        let newAccessory = {\n            \"type\": \"lightbulb-Dimmable\",\n            \"name\": id,\n            \"debounceRecvms\": 2000,\n            \"optimizePublishing\": true,\n            \"topics\": {\n                //\"getOnline\": \"aragon/getOnline\",\n                //\"getOn\": \"aragon/getOn/\" + JSON.stringify(data),\n                \"setOn\": \"aragon/setOn/\" + JSON.stringify(data),\n                //\"getBrightness\": \"aragon/getBrightness/\" + JSON.stringify(data),\n                \"setBrightness\": \"aragon/setBrightness/\" + JSON.stringify(data)\n            },\n            \"aragon\": {\n               \"type\": device.type,\n               \"object\": device.object,\n               \"zone\": device.zone\n            },\n            \"integerValue\": false,\n            \"onValue\": \"on\",\n            \"offValue\": \"off\",            \n            \"manufacturer\": \"Aragon\",\n            \"accessory\": \"mqttthing\"\n        };\n        // Add the new accessory to the payload\n        msg.payload.accessories.push(newAccessory);\n    }\n    else if (device.type === \"lights\") {\n        let newAccessory = {\n            \"type\": \"lightbulb\",\n            \"name\": id,\n            \"debounceRecvms\": 2000,\n            \"optimizePublishing\": true,\n            \"topics\": {\n                //\"getOnline\": \"aragon/getOnline\",\n                //\"getOn\": \"aragon/getOn/\" + JSON.stringify(data),\n                \"setOn\": \"aragon/setOn/\" + JSON.stringify(data)\n            },\n            \"aragon\": {\n                \"type\": device.type,\n                \"object\": device.object,\n                \"zone\": device.zone\n            },\n            \"integerValue\": false,\n            \"onValue\": \"on\",\n            \"offValue\": \"off\",            \n            \"manufacturer\": \"Aragon\",\n            \"accessory\": \"mqttthing\"\n        };\n        // Add the new accessory to the payload\n        msg.payload.accessories.push(newAccessory);\n    } else if (device.type === \"scenes\") {\n        let newAccessory = {\n            \"type\": \"switch\",\n            \"name\": id,\n            \"debounceRecvms\": 2000,\n            \"optimizePublishing\": true,\n            \"topics\": {\n                //\"getOnline\": \"aragon/getOnline\",\n                //\"getOn\": \"aragon/getOn/\" + JSON.stringify(data),\n                \"setOn\": \"aragon/setOn/\" + JSON.stringify(data)\n            },\n            \"aragon\": {\n                \"type\": device.type,\n                \"object\": device.object,\n                \"zone\": device.zone\n            },\n            \"turnOffAfterms\": 1000,\n            \"integerValue\": false,\n            \"onValue\": \"on\",\n            \"offValue\": \"off\",              \n            \"manufacturer\": \"Aragon\",\n            \"accessory\": \"mqttthing\"\n        };\n        // Add the new accessory to the payload\n        msg.payload.accessories.push(newAccessory);\n    }\n});\n\nnode.warn(\"Number of Homebridge accessories after: \" + msg.payload.accessories.length);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 240,
        "wires": [
            [
                "09df32bee7a3f35e"
            ]
        ]
    },
    {
        "id": "09df32bee7a3f35e",
        "type": "json",
        "z": "26ae44e5b7c93490",
        "g": "2c9ace3317720eb5",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": true,
        "x": 745,
        "y": 240,
        "wires": [
            [
                "ba4c8cead7776662"
            ]
        ],
        "l": false
    },
    {
        "id": "ba4c8cead7776662",
        "type": "file",
        "z": "26ae44e5b7c93490",
        "g": "2c9ace3317720eb5",
        "name": "save",
        "filename": "/var/lib/homebridge/config.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 850,
        "y": 240,
        "wires": [
            [
                "52a84909e444f420"
            ]
        ]
    },
    {
        "id": "8be165ddae34b0bb",
        "type": "inject",
        "z": "26ae44e5b7c93490",
        "g": "2c9ace3317720eb5",
        "name": "Inject devices",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Skipped!",
        "payloadType": "str",
        "x": 155,
        "y": 240,
        "wires": [
            [
                "d0be896fdde1bd1f"
            ]
        ],
        "l": false
    },
    {
        "id": "36b5bc44888c7bc9",
        "type": "exec",
        "z": "26ae44e5b7c93490",
        "g": "2c9ace3317720eb5",
        "command": "sudo chmod 666 /var/lib/homebridge/config.json",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Make it writable",
        "x": 285,
        "y": 240,
        "wires": [
            [
                "1884c5bdfc24fc42"
            ],
            [],
            []
        ],
        "l": false
    },
    {
        "id": "52a84909e444f420",
        "type": "exec",
        "z": "26ae44e5b7c93490",
        "g": "2c9ace3317720eb5",
        "command": "sudo systemctl restart  homebridge.service",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "restart HB",
        "x": 955,
        "y": 240,
        "wires": [
            [],
            [],
            []
        ],
        "l": false
    },
    {
        "id": "d0be896fdde1bd1f",
        "type": "delay",
        "z": "26ae44e5b7c93490",
        "g": "2c9ace3317720eb5",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "30",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 2,
        "x": 225,
        "y": 240,
        "wires": [
            [
                "36b5bc44888c7bc9"
            ],
            [
                "e207718cbd0f60ed"
            ]
        ],
        "l": false
    },
    {
        "id": "e207718cbd0f60ed",
        "type": "debug",
        "z": "26ae44e5b7c93490",
        "g": "2c9ace3317720eb5",
        "name": "Skipped (rate limit 30 sec)",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 285,
        "y": 280,
        "wires": [],
        "l": false
    },
    {
        "id": "6b64fe5451b0b6c4",
        "type": "debug",
        "z": "26ae44e5b7c93490",
        "g": "2c9ace3317720eb5",
        "name": "debug 32",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 575,
        "y": 280,
        "wires": [],
        "l": false
    },
    {
        "id": "e1e13a24a59ed36b",
        "type": "mqtt in",
        "z": "26ae44e5b7c93490",
        "g": "6807bfe666d01630",
        "name": "",
        "topic": "aragon/+/+",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "f96ab142.d8bab8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 420,
        "wires": [
            [
                "23969a067bcf4fe0",
                "c9133e258da4f402"
            ]
        ]
    },
    {
        "id": "23969a067bcf4fe0",
        "type": "debug",
        "z": "26ae44e5b7c93490",
        "g": "6807bfe666d01630",
        "name": "nlu-requests",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 315,
        "y": 380,
        "wires": [],
        "l": false
    },
    {
        "id": "c9133e258da4f402",
        "type": "delay",
        "z": "26ae44e5b7c93490",
        "g": "6807bfe666d01630",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 325,
        "y": 420,
        "wires": [
            [
                "55e7dd8a0307733d"
            ]
        ],
        "l": false
    },
    {
        "id": "55e7dd8a0307733d",
        "type": "function",
        "z": "26ae44e5b7c93490",
        "g": "6807bfe666d01630",
        "name": "Prepare",
        "func": "var module = global.get(\"module\");\nvar allRooms = module.settingsGetValue(\"allRooms\");\n\nvar topicParts = msg.topic.split(\"/\");\nvar subTopic = topicParts[1]; // This will be 'setOn', 'setBrightness' etc\nvar dataString = topicParts.slice(2).join(\"/\"); // Reconstruct the data part of the topic\nvar data = JSON.parse(dataString); // Parse the JSON string to an object\n\n// Now 'data' contains the object with the 'aragon' property\nvar type = data.aragon.type;\nvar object = data.aragon.object;\nvar zone = data.aragon.zone;\nvar text = \"\";\nvar value = msg.payload;\n\n// Function to check if zone exists in allRooms, and assign first siteName to zone if not\nfunction checkAndAssignSiteName(allRooms, zone) {\n  // Check if any object in allRooms has a siteName equal to zone\n  const siteExists = allRooms.find(adapter => adapter.siteName === zone);\n\n  // If zone doesn't exist in allRooms, assign zone to Default\n  if (!siteExists) {\n    zone = 'Default';\n  }\n\n  return zone;\n}\n\nfunction limitPercentValue(val){\n    let intValue = parseInt(val, 10);\n    if (isNaN(intValue) || intValue < 1 || intValue > 100) {\n        intValue = 1;\n    }\n    else if (intValue > 100) {\n        intValue = 100;\n    }\n    return intValue.toString();\n}\n\n//node.warn(\"type: \" + type + \" subTopic: \" + subTopic + \" value: \" + value + \" object: \" + object + \" zone: \" + zone );\n\nswitch(type){\n    case \"dimmers\":\n        switch(subTopic){\n            case \"setBrightness\": \n                text = \"Set the \" + zone + \" \" + object + \" brightness to \" + limitPercentValue(value) + \" percent\";\n                break;\n            case \"setOn\":\n                text = zone + \" \" + object + \" \" + value;\n                break;\n            default:\n                node.warn(\"Unhandled action in 'dimmers' \" + subTopic);\n                break;\n        }\n        break;\n    case \"lights\":\n        switch(subTopic){\n            case \"setOn\":\n                text = zone + \" \" + object + \" \" + value;\n                break;\n            default:\n                node.warn(\"Unhandled action in 'lights' \" + subTopic);\n                break;\n        }\n        break;\n    case \"scenes\":\n        switch(subTopic){\n            case \"setOn\":\n                if(value.toLowerCase() === 'on'){\n                    text = \"Activate \" + zone + \" \" + object;\n                }\n                break;\n            default:\n                node.warn(\"Unhandled action in 'scenes' \" + subTopic);\n                break;\n        }\n        break;\n}\nif(text===''){\n    return;\n}\n\n//node.warn(\"To NLU: \"+text);\nmsg.payload = {};\nmsg.payload.input = text;\nmsg.payload.siteId = checkAndAssignSiteName(allRooms, zone);\n\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 420,
        "wires": [
            [
                "579eaeccae04addb",
                "d7fb72fdaf32ced6"
            ]
        ]
    },
    {
        "id": "d7fb72fdaf32ced6",
        "type": "mqtt out",
        "z": "26ae44e5b7c93490",
        "g": "6807bfe666d01630",
        "name": "",
        "topic": "hermes/nlu/query",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e97e3cfe399ca3f9",
        "x": 615,
        "y": 420,
        "wires": [],
        "l": false
    },
    {
        "id": "579eaeccae04addb",
        "type": "debug",
        "z": "26ae44e5b7c93490",
        "g": "6807bfe666d01630",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 615,
        "y": 480,
        "wires": [],
        "l": false
    },
    {
        "id": "b265dfa1ac0fd8cf",
        "type": "comment",
        "z": "26ae44e5b7c93490",
        "name": "README",
        "info": "This flow adds the Aragon devices to the Homebridge and enables control from HomeKit and Siri.\nAdditionally, Homebridge comes with a web based dashboard that can be used from any browser.\n\nDo this:\n1. Install the Homebridge plugin `Homebridge Mqttthing`\n1. Import and Deploy this flow in Node-RED\n1. Press the `Inject devices` button, wait 15 seconds\n1. Open Homebridge Accessories and vrify that the device can be controlled.",
        "x": 160,
        "y": 40,
        "wires": []
    },
    {
        "id": "84adcc70aa2bd2e0",
        "type": "function",
        "z": "26ae44e5b7c93490",
        "g": "713a3b946477d176",
        "name": "Options",
        "func": "// If you add or edit Mqttthing devices from the Homebridge plugin, they will loose their Aragon settings. When you add Aragon\n// all mqttthings will be replaced. To replace only Aragon devices, set replaceAragonOnly to true, save and add devices\n// Default: false \nflow.set(\"replaceAragonOnly\", false); \n\n// When the accesories have a leading number in their name, they can be automatically sorted into rooms by the realKNX iOS application\n// With the added leading number comes the risk off mane truncation in the Homebridge Dashboard\n// Default: false \nflow.set(\"addLeadingNumbers\", false); ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "78b24175d17ab027",
        "type": "inject",
        "z": "26ae44e5b7c93490",
        "g": "713a3b946477d176",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 155,
        "y": 120,
        "wires": [
            [
                "84adcc70aa2bd2e0"
            ]
        ],
        "l": false
    },
    {
        "id": "f96ab142.d8bab8",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "3",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e97e3cfe399ca3f9",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]