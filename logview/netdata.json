[
    {
        "id": "d5c5fe291dcd0818",
        "type": "group",
        "z": "eb3e4041.662fc8",
        "name": "PROSERV: DATA COLLECTION AND PRESENTATION WITH NETDATA",
        "style": {
            "label": true,
            "fill": "#bfdbef"
        },
        "nodes": [
            "63c1b68e482bc235",
            "e54dc1e59db1b4b3",
            "3d49ac856d044cc4",
            "bb73744ea4053519",
            "608934b501727c13",
            "3a7396e572a0a4a2",
            "4450a2402235069c",
            "ed765ca750c6593b",
            "15b6586258937114",
            "47d7d6f876a3192a",
            "e84db2e07556a222",
            "b50402b5e2fa3da8",
            "39c2e7231a5d10c5",
            "69fd5d1a1ff9f87a",
            "59be3f8ab415856c",
            "d781ebbc8f17787a",
            "0487af959e78a0d9",
            "3bbff85e6bc7b58b",
            "2a1cae05055b3528",
            "afd9c3a18441023c",
            "c2843e8245f22ee7",
            "e884ecb15ecb8d66",
            "c69c8e3a215fcef0",
            "3011baed31e6db14",
            "8c716aadd3e64642",
            "83f6178cb6523a73",
            "e452fdac5690b445",
            "dd1d238b993df510",
            "b0386360cb7b5887",
            "574951c0b3d21af5",
            "99fc55b1dc2c1aa7",
            "a753e3c35316e23b",
            "71ec6682d06ac375",
            "9b4b4c83aaaa88e7",
            "a2467b91d154660c",
            "c5977858f7e54062",
            "2fc9725329178ef8",
            "bf686198385b4eb3",
            "4e3e3be706265dc6",
            "fbfd7856500c2b2c",
            "66bba194a41eecc6",
            "45111822a1b3f69c",
            "9c5caaacd6fbd24f",
            "0e5ab278ead6ca8f",
            "fa6c2ca1293e30e5",
            "36a8d799843cfabc",
            "c297f749427349a5",
            "e763d206114a50ec",
            "30b3a705acf70aef",
            "bf8b06a677fae77b",
            "f864e430fe07f96a",
            "f7ca4af255e6fe49",
            "731da3a0b3be9123",
            "a93e8cad1bdf4014",
            "e601a80c3e26adca",
            "1d15983fb928d347",
            "b5598e78aec86207",
            "679146f79a27377d",
            "cf67491449abb00b",
            "c0421b8df1b7bbc7",
            "bb3ed98dd4c997c2",
            "63197ed8e088b122",
            "4f1087a959d53c7d",
            "3961e5f3d869191e",
            "0cc868bddc074bb0",
            "7bcddd6e122ff67a"
        ],
        "x": 2234,
        "y": 1179,
        "w": 902,
        "h": 902
    },
    {
        "id": "63c1b68e482bc235",
        "type": "catch",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "",
        "scope": [
            "608934b501727c13",
            "4450a2402235069c",
            "e84db2e07556a222",
            "b50402b5e2fa3da8",
            "69fd5d1a1ff9f87a",
            "59be3f8ab415856c",
            "0487af959e78a0d9",
            "3bbff85e6bc7b58b",
            "afd9c3a18441023c",
            "a753e3c35316e23b",
            "c0421b8df1b7bbc7",
            "bb3ed98dd4c997c2"
        ],
        "uncaught": false,
        "x": 2840,
        "y": 1600,
        "wires": [
            [
                "e54dc1e59db1b4b3"
            ]
        ]
    },
    {
        "id": "e54dc1e59db1b4b3",
        "type": "debug",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "Exception while creating Netdata files",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2955,
        "y": 1600,
        "wires": [],
        "l": false
    },
    {
        "id": "3d49ac856d044cc4",
        "type": "http in",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "",
        "url": "/netdata/proserv/:zone/:object",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2420,
        "y": 1920,
        "wires": [
            [
                "bb73744ea4053519",
                "fbfd7856500c2b2c"
            ]
        ]
    },
    {
        "id": "bb73744ea4053519",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "get url",
        "func": "if (global.get(\"module\").settingsGetValue(\"enableDataCollectionProserv\") !== true){\n    node.warn(\"Data collection is not enabled\");\n    msg.statusCode = 500;\n    return [msg, null];\n}\n\nlet m = msg.req.params;\nlet data = flow.get(\"data\");\nvar module = global.get(\"module\");\nlet gatewayIP = module.settingsGetValue(\"msgProServIP\");\n//node.warn(\"gatewayIP: \"+gatewayIP);\n//node.warn(\"m.zone: \"+m.zone);\n//node.warn(\"m.object: \"+m.object);\n\n//m.zone = m.zone.replace(/[^a-zA-Z0-9 ]/g, ' ');\n//m.object = m.object.replace(/[^a-zA-Z0-9 ]/g, ' ');\nm.zone=m.zone.toLowerCase().replaceAll(/[ /]/g, \"_\");\nm.object=m.object.toLowerCase().replaceAll(/[ /]/g, \"_\");\n\nfor (let i = 0; i < data.length; ++i )\n{\n    if (data[i].zone.toLowerCase().replaceAll(/[ /]/g, \"_\") === m.zone && data[i].object.toLowerCase().replaceAll(/[ /]/g, \"_\") === m.object){\n        if (data[i].data == null){\n            msg.url = data[i].url;\n            flow.set(\"number\", i);\n            return [null, msg];\n        } else {\n            msg.payload = data[i].data;\n            return [msg, null];\n        }\n    }\n}\nnode.warn(\"Couldn't find \"+m.object+ \" in \"+m.zone);\nmsg.payload = \"?\";\nreturn [msg, null];\n\n\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2640,
        "y": 1920,
        "wires": [
            [
                "dd1d238b993df510",
                "66bba194a41eecc6"
            ],
            [
                "45111822a1b3f69c",
                "a93e8cad1bdf4014"
            ]
        ]
    },
    {
        "id": "608934b501727c13",
        "type": "template",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "sensors.chart.py",
        "field": "payload",
        "fieldType": "msg",
        "format": "python",
        "syntax": "mustache",
        "template": "# -*- coding: utf-8 -*-\n# Description: sensors netdata python.d plugin\n# Author: ahdabelle\n# SPDX-License-Identifier: GPL-3.0-or-later\n\nfrom bases.FrameworkServices.SimpleService import SimpleService\nimport requests\nfrom requests.exceptions import RequestException\nimport json\n\n# Default configuration\nDEFAULT_URL = \"http://localhost\"\nDEFAULT_PORT = 1880\nDEFAULT_TIMEOUT = 5\n\nORDER = []\nCHARTS = {}\n\nclass Service(SimpleService):\n    def __init__(self, configuration=None, name=None):\n        SimpleService.__init__(self, configuration=configuration, name=name)\n        self.definitions = CHARTS\n        self.base_url = configuration.get('url', DEFAULT_URL)\n        self.port = configuration.get('port', DEFAULT_PORT)\n        self.timeout = configuration.get('timeout', DEFAULT_TIMEOUT)\n        self.session = requests.Session()\n\n    @staticmethod\n    def check():\n        return True\n        \n    def verify_charts(self, name, dim, title, units, family, context, chart_type='line', algorithm='absolute', multiplier=1, divisor=1000):\n        \"\"\"Check if chart is defined, add it if not, then add each dimension as needed.\n        \n        Args:\n            name (str): Chart name\n            dim (str): Dimension ID\n            title (str): Chart title\n            units (str): Units of measurement\n            family (str): Chart family\n            context (str): Chart context\n            chart_type (str): Type of chart (default: line)\n            algorithm (str): Algorithm type (default: absolute)\n            multiplier (int): Value multiplier (default: 1)\n            divisor (int): Value divisor (default: 1000)\n        \"\"\"\n        config = {'options': [name, title, units, family, context, chart_type]}\n        if name not in self.charts:\n            params = [name] + config['options']\n            self.charts.add_chart(params=params)\n\n        if dim not in self.charts[name]:\n            self.charts[name].add_dimension([dim, dim, algorithm, multiplier, divisor])\n\n    def make_request(self, endpoint):\n        \"\"\"Make HTTP request with error handling.\n        \n        Args:\n            endpoint (str): API endpoint\n            \n        Returns:\n            dict: JSON response or None if error\n        \"\"\"\n        url = f\"{self.base_url}:{self.port}{endpoint}\"\n        try:\n            response = self.session.get(url, timeout=self.timeout)\n            response.raise_for_status()  # Raise exception for bad status codes\n            return response.json()\n        except RequestException as e:\n            self.error(f\"Request failed for {url}: {str(e)}\")\n            return None\n        except ValueError as e:\n            self.error(f\"Invalid JSON response from {url}: {str(e)}\")\n            return None\n\n    def get_data(self):\n        \"\"\"Collect and process sensor data.\n        \n        Returns:\n            dict: Processed sensor data or None if error\n        \"\"\"\n        data = dict()\n        \n        # Get all sensors data\n        dataArray = self.make_request(\"/netdata/proserv/sensors\")\n        if not dataArray:\n            return None\n\n        try:\n            for sensor in dataArray:\n                name_zone = sensor.get('zone', '').lower().replace(\" \", \"_\").replace(\"/\", \"_\")\n                name_object = sensor.get('object', '').lower().replace(\" \", \"_\").replace(\"/\", \"_\")\n                name_unit = sensor.get('unit', '')\n                \n                if not all([name_zone, name_object]):\n                    continue  # Skip if missing required fields\n                \n                dimension_id = f\"{name_zone}_{name_object}\"\n            \n                self.verify_charts(\n                    name=name_object,\n                    dim=dimension_id,\n                    title=name_object,\n                    units=name_unit,\n                    family=name_object,\n                    context=f'sensors.{name_object}',\n                    divisor=1000\n                )\n                \n                # Get specific sensor data\n                sensor_data = self.make_request(f\"/netdata/proserv/{name_zone}/{name_object}\")\n                if sensor_data and 'Data' in sensor_data and sensor_data['Data']:\n                    value = sensor_data['Data'][0].get('Value', 0)\n                    data[dimension_id] = value * 1000\n                \n        except Exception as e:\n            self.error(f\"Error processing sensor data: {str(e)}\")\n            return None\n            \n        return data or None\n",
        "output": "str",
        "x": 2660,
        "y": 1340,
        "wires": [
            [
                "e84db2e07556a222"
            ]
        ]
    },
    {
        "id": "3a7396e572a0a4a2",
        "type": "debug",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "restart netdata",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2745,
        "y": 1520,
        "wires": [],
        "l": false
    },
    {
        "id": "4450a2402235069c",
        "type": "file",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "sensors.html",
        "filename": "/tmp/sensors.html",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2870,
        "y": 1460,
        "wires": [
            [
                "59be3f8ab415856c"
            ]
        ]
    },
    {
        "id": "ed765ca750c6593b",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "sensors",
        "func": "if (global.get(\"module\").settingsGetValue(\"enableDataCollectionProserv\") !== true){\n    //node.warn(\"Data collection is not enabled\");\n    msg.statusCode = 500;\n    return msg;\n}\n\nlet data = flow.get('data');\n\nmsg.payload = data;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2640,
        "y": 1800,
        "wires": [
            [
                "47d7d6f876a3192a",
                "4f1087a959d53c7d"
            ]
        ]
    },
    {
        "id": "15b6586258937114",
        "type": "http in",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "",
        "url": "/netdata/proserv/sensors",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 2400,
        "y": 1800,
        "wires": [
            [
                "ed765ca750c6593b",
                "63197ed8e088b122"
            ]
        ]
    },
    {
        "id": "47d7d6f876a3192a",
        "type": "http response",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2790,
        "y": 1800,
        "wires": []
    },
    {
        "id": "e84db2e07556a222",
        "type": "file",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "sensors.chart.py",
        "filename": "/tmp/sensors.chart.py",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2860,
        "y": 1340,
        "wires": [
            [
                "b50402b5e2fa3da8"
            ]
        ]
    },
    {
        "id": "b50402b5e2fa3da8",
        "type": "exec",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "command": "sudo mv /tmp/sensors.chart.py /usr/libexec/netdata/python.d/ && sudo chown root /usr/libexec/netdata/python.d/sensors.chart.py",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Move sensors.chart.py",
        "x": 2995,
        "y": 1340,
        "wires": [
            [
                "39c2e7231a5d10c5"
            ],
            [
                "39c2e7231a5d10c5"
            ],
            [
                "39c2e7231a5d10c5"
            ]
        ],
        "l": false
    },
    {
        "id": "39c2e7231a5d10c5",
        "type": "debug",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "sensors.chart.py",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3075,
        "y": 1340,
        "wires": [],
        "l": false
    },
    {
        "id": "69fd5d1a1ff9f87a",
        "type": "template",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "sensors.conf",
        "field": "payload",
        "fieldType": "msg",
        "format": "yaml",
        "syntax": "mustache",
        "template": "# netdata python.d.plugin configuration for sensors\n#\n# This file is in YaML format. Generally the format is:\n#\n# name: value\n#\n\n# ----------------------------------------------------------------------\n# Global Variables\n# These variables set the defaults for all JOBs, however each JOB\n# may define its own, overriding the defaults.\n\n# update_every sets the default data collection frequency.\n# If unset, the python.d.plugin default is used.\nupdate_every: 5\n\n# priority controls the order of charts at the netdata dashboard.\n# Lower numbers move the charts towards the top of the page.\n# If unset, the default for python.d.plugin is used.\n# priority: 60000\n\n# penalty indicates whether to apply penalty to update_every in case of failures.\n# Penalty will increase every 5 failed updates in a row. Maximum penalty is 10 minutes.\n# penalty: yes\n\n# autodetection_retry sets the job re-check interval in seconds.\n# The job is not deleted if check fails.\n# Attempts to start the job are made once every autodetection_retry.\n# This feature is disabled by default.\n# autodetection_retry: 0\n",
        "output": "str",
        "x": 2650,
        "y": 1400,
        "wires": [
            [
                "0487af959e78a0d9"
            ]
        ]
    },
    {
        "id": "59be3f8ab415856c",
        "type": "exec",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "command": "sudo mv /tmp/sensors.html /usr/share/netdata/web && sudo chown root /usr/share/netdata/web/sensors.html",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Move sensors.html",
        "x": 2995,
        "y": 1460,
        "wires": [
            [
                "d781ebbc8f17787a"
            ],
            [
                "d781ebbc8f17787a"
            ],
            [
                "d781ebbc8f17787a"
            ]
        ],
        "l": false
    },
    {
        "id": "d781ebbc8f17787a",
        "type": "debug",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "sensors.html",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3075,
        "y": 1460,
        "wires": [],
        "l": false
    },
    {
        "id": "0487af959e78a0d9",
        "type": "file",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "sensors.conf",
        "filename": "/tmp/sensors.conf",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 2870,
        "y": 1400,
        "wires": [
            [
                "3bbff85e6bc7b58b"
            ]
        ]
    },
    {
        "id": "3bbff85e6bc7b58b",
        "type": "exec",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "command": "sudo mkdir -p /etc/netdata/python.d && sudo mv /tmp/sensors.conf /etc/netdata/python.d && sudo chown root /etc/netdata/python.d/sensors.conf",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Move sensors.conf",
        "x": 2995,
        "y": 1400,
        "wires": [
            [
                "2a1cae05055b3528"
            ],
            [
                "2a1cae05055b3528"
            ],
            [
                "2a1cae05055b3528"
            ]
        ],
        "l": false
    },
    {
        "id": "2a1cae05055b3528",
        "type": "debug",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "sensors.conf",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 3075,
        "y": 1400,
        "wires": [],
        "l": false
    },
    {
        "id": "afd9c3a18441023c",
        "type": "exec",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "command": "sudo systemctl restart netdata",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "restart netdata",
        "x": 2675,
        "y": 1520,
        "wires": [
            [
                "3a7396e572a0a4a2"
            ],
            [
                "3a7396e572a0a4a2"
            ],
            [
                "3a7396e572a0a4a2"
            ]
        ],
        "l": false
    },
    {
        "id": "c2843e8245f22ee7",
        "type": "delay",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "",
        "pauseType": "rate",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 2595,
        "y": 1520,
        "wires": [
            [
                "afd9c3a18441023c"
            ]
        ],
        "l": false
    },
    {
        "id": "e884ecb15ecb8d66",
        "type": "debug",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "catch http request",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2950,
        "y": 2040,
        "wires": []
    },
    {
        "id": "c69c8e3a215fcef0",
        "type": "catch",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "catch http request",
        "scope": [
            "83f6178cb6523a73",
            "a2467b91d154660c"
        ],
        "uncaught": false,
        "x": 2730,
        "y": 2040,
        "wires": [
            [
                "e884ecb15ecb8d66"
            ]
        ]
    },
    {
        "id": "3011baed31e6db14",
        "type": "debug",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "catch get url",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2520,
        "y": 2040,
        "wires": []
    },
    {
        "id": "8c716aadd3e64642",
        "type": "catch",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "catch get url",
        "scope": [
            "bb73744ea4053519",
            "e452fdac5690b445"
        ],
        "uncaught": false,
        "x": 2350,
        "y": 2040,
        "wires": [
            [
                "3011baed31e6db14"
            ]
        ]
    },
    {
        "id": "83f6178cb6523a73",
        "type": "http request",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2775,
        "y": 1720,
        "wires": [
            [
                "b0386360cb7b5887"
            ]
        ],
        "l": false
    },
    {
        "id": "e452fdac5690b445",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "get url",
        "func": "let data = flow.get(\"data\");\nlet number = flow.get(\"number\");\n\nmsg.url = data[number].url;\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 1720,
        "wires": [
            [
                "83f6178cb6523a73"
            ]
        ]
    },
    {
        "id": "dd1d238b993df510",
        "type": "http response",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2945,
        "y": 1915,
        "wires": []
    },
    {
        "id": "b0386360cb7b5887",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "update data",
        "func": "let data = flow.get(\"data\");\nlet number = flow.get(\"number\");\n\ndata[number].data = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2890,
        "y": 1720,
        "wires": [
            [
                "9b4b4c83aaaa88e7"
            ]
        ]
    },
    {
        "id": "574951c0b3d21af5",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "random sensor",
        "func": "if (!global.get(\"module\").settingsGetValue(\"enableDataCollectionProserv\")) {\n    return;\n}\n\nlet data = flow.get(\"data\");\nif(data===undefined || data.length == undefined || data.length===0){\n    return null;\n}\nlet pre_number = flow.get(\"number\");\nlet number = Math.floor(Math.random()*data.length);\n\nflow.set(\"number\", number);\n//node.warn(\"New number: \"+number+\" (of \"+data.length +\") was:\"+pre_number);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2440,
        "y": 1680,
        "wires": [
            [
                "e452fdac5690b445"
            ]
        ]
    },
    {
        "id": "99fc55b1dc2c1aa7",
        "type": "inject",
        "z": "eb3e4041.662fc8",
        "d": true,
        "g": "d5c5fe291dcd0818",
        "name": "RANDOM EVERY 2sec",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": false,
        "onceDelay": "140",
        "topic": "",
        "x": 2325,
        "y": 1680,
        "wires": [
            [
                "574951c0b3d21af5"
            ]
        ],
        "l": false
    },
    {
        "id": "a753e3c35316e23b",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "Build internal device list",
        "func": "var module = global.get(\"module\");\nlet lang = module.settingsGetValue(\"msgLang\");\nlet gateway = module.settingsGetValue(\"msgGateway\");\nlet gatewayIP = module.settingsGetValue(\"msgProServIP\");\nlet deviceList = module.settingsGetValue(\"msgDeviceList\");\nlet rooms = module.settingsGetValue(\"rooms\");\n\nif (global.get(\"module\").settingsGetValue(\"msgGateway\") !== 'proserv') {\n    return;\n}\n\nif (module.settingsGetValue(\"enableDataCollectionProserv\") !== true){\n    return;\n}\n\nnode.warn(\"Build internal device list\")\n\nvar data = [];\n\nif(deviceList !== undefined){\n    for (let j = 0; j < deviceList.length; ++j )\n    {\n        let forceLog = false;\n        if(deviceList[j].unit!==undefined && deviceList[j].unit.toLowerCase().includes(\"watt\")){\n            forceLog = true;\n        }\n        if (deviceList[j].log === true && deviceList[j].type === \"heating\" ){\n            if (!('unit' in deviceList[j])) {\n              deviceList[j].unit = '°C';\n            }\n            \n        }\n\n        if (deviceList[j].log === true || forceLog){\n            let array = {};\n            array['object'] = deviceList[j].object;\n            array['type'] = deviceList[j].type;\n            array['unit'] = deviceList[j].unit;\n            array['url'] = gatewayIP + deviceList[j].currentState.getCurrentUrl;\n            array['zone'] = deviceList[j].zone;\n            data.push(array);\n        }\n    }\n}\n\n\nnode.warn(\"You have \"+data.length+\" datapoints for logging\");\nif(data.length>30 && data.length<60){\n    node.warn(\" > RECOMMENDATION: INCREASE THE DATA COLLECTION INTERVAL TO 2 MINUTES\");\n}\nelse if(data.length>60){\n    node.warn(\" > RECOMMENDATION: INCREASE THE DATA COLLECTION INTERVAL TO 3+ MINUTES\");\n}\n\nflow.set('data',data);\n\nif(msg.hardreset!==undefined){\n    node.warn(\"Hard reset - recreate Netdata files\");\n    msg.payload = data;    \n    return [msg, null];\n} else {\n    node.warn(\"Soft reset - restart Netdata\");\n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2415,
        "y": 1380,
        "wires": [
            [
                "71ec6682d06ac375"
            ],
            [
                "c2843e8245f22ee7"
            ]
        ],
        "outputLabels": [
            "Hard reset",
            "Soft reset"
        ],
        "l": false
    },
    {
        "id": "71ec6682d06ac375",
        "type": "switch",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "check if data is not null",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2475,
        "y": 1340,
        "wires": [
            [
                "608934b501727c13",
                "69fd5d1a1ff9f87a",
                "c2843e8245f22ee7",
                "c0421b8df1b7bbc7"
            ]
        ],
        "l": false
    },
    {
        "id": "9b4b4c83aaaa88e7",
        "type": "debug",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "update data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3005,
        "y": 1720,
        "wires": [],
        "l": false
    },
    {
        "id": "a2467b91d154660c",
        "type": "http request",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": true,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 2795,
        "y": 1940,
        "wires": [
            [
                "dd1d238b993df510",
                "c5977858f7e54062"
            ]
        ],
        "l": false
    },
    {
        "id": "c5977858f7e54062",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "update data",
        "func": "let data = flow.get(\"data\");\nlet number = flow.get(\"number\");\n\ndata[number].data = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2930,
        "y": 1960,
        "wires": [
            [
                "2fc9725329178ef8"
            ]
        ]
    },
    {
        "id": "2fc9725329178ef8",
        "type": "debug",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "update data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 3045,
        "y": 1960,
        "wires": [],
        "l": false
    },
    {
        "id": "bf686198385b4eb3",
        "type": "inject",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "HARD reset (recreat charts)",
        "props": [
            {
                "p": "hardreset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "120",
        "topic": "",
        "x": 2305,
        "y": 1520,
        "wires": [
            [
                "7bcddd6e122ff67a"
            ]
        ],
        "l": false
    },
    {
        "id": "4e3e3be706265dc6",
        "type": "comment",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "Netdata - readme",
        "info": "# Automatic logging and presentation of proServ sensors ('#l' tagged datapoints) plus any energy-related datapoint\nThe automatic data logging and presentation is restricted to ProServ.\n\nPreparations: Tag all relevant datapoints with '#l'in ETS\n\n1. Optional: Copy this group to a new Tab (if you make changes and don't want it be overwritten on next update!): Right click on the group border, Select 'Copy selected nodes', Paste in new Tab\n1. In the 'Enable data collection?' blue node: \n  - Change the value to true \n1. Select the 'HARD reset' to recreat charts, wait a bit \n1. Option 1: Open Netdata Sensors chart from Aragon menu 'Extras'\n1. Option 2: Open Netdata Dashboard from Aragon menu 'Extras' \n  - Select 'Skip and use the dashboard anonymously.' bottom right \n  - Look for 'Sensors' in the menu to the right, bottom\n\n\nHow data collection works:\nThe data collection (reading the datapoints from the gateway) is asynchronous. The values are read and stored internally in a flow variable. The values are collected once per minute (default) or randomly (you need to modify). In the case you have more than ~40 datapoints, you should increase the reading interval to two minutes.\nIndependent of the data collection, Netdata queries this flow for values (cached in flow variable).  \n(Tread safetty: In Javascript/Node-RED there are no threads, JavaScript is single threaded, it's impossible for two javascript statements to run at the same time.)\n\n",
        "x": 2340,
        "y": 1220,
        "wires": []
    },
    {
        "id": "fbfd7856500c2b2c",
        "type": "debug",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2605,
        "y": 1880,
        "wires": [],
        "l": false
    },
    {
        "id": "66bba194a41eecc6",
        "type": "debug",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "get url",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2725,
        "y": 1880,
        "wires": [],
        "l": false
    },
    {
        "id": "45111822a1b3f69c",
        "type": "debug",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "get url",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "url",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2725,
        "y": 1980,
        "wires": [],
        "l": false
    },
    {
        "id": "9c5caaacd6fbd24f",
        "type": "inject",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "DATA COLLECTION INTERVAL",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "140",
        "topic": "",
        "x": 2325,
        "y": 1740,
        "wires": [
            [
                "36a8d799843cfabc"
            ]
        ],
        "l": false
    },
    {
        "id": "0e5ab278ead6ca8f",
        "type": "split",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 2425,
        "y": 1740,
        "wires": [
            [
                "fa6c2ca1293e30e5"
            ]
        ],
        "l": false
    },
    {
        "id": "fa6c2ca1293e30e5",
        "type": "delay",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2475,
        "y": 1740,
        "wires": [
            [
                "c297f749427349a5"
            ]
        ],
        "l": false
    },
    {
        "id": "36a8d799843cfabc",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "all sensors",
        "func": "if (!global.get(\"module\").settingsGetValue(\"enableDataCollectionProserv\")) {\n    return;\n}\n\nlet data = flow.get(\"data\");\nif(data===undefined || data.length == undefined || data.length===0){\n    return null;\n}\nvar numberArray = [];\nfor (var i = 0; i < data.length; i++) {\nnumberArray.push(i);\n}\nmsg.payload = numberArray;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2375,
        "y": 1740,
        "wires": [
            [
                "0e5ab278ead6ca8f"
            ]
        ],
        "l": false
    },
    {
        "id": "c297f749427349a5",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "all sensors",
        "func": "flow.set(\"number\", msg.payload);\n//node.warn(\"New number: \"+msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2525,
        "y": 1740,
        "wires": [
            [
                "e452fdac5690b445"
            ]
        ],
        "l": false
    },
    {
        "id": "e763d206114a50ec",
        "type": "inject",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "SOFT reset & Start-up",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "20",
        "topic": "",
        "x": 2305,
        "y": 1380,
        "wires": [
            [
                "731da3a0b3be9123"
            ]
        ],
        "l": false
    },
    {
        "id": "30b3a705acf70aef",
        "type": "comment",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "SOFT reset",
        "info": "Recreates internal data and Restarts Netdata ",
        "x": 2330,
        "y": 1340,
        "wires": []
    },
    {
        "id": "bf8b06a677fae77b",
        "type": "comment",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "HARD reset",
        "info": "Recreates internal data, charts and Restarts Netdata ",
        "x": 2330,
        "y": 1480,
        "wires": []
    },
    {
        "id": "f864e430fe07f96a",
        "type": "comment",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "Data collection - every minute (default) or random (every 2 sec)",
        "info": "Enable the preferred data collection method.\n",
        "x": 2510,
        "y": 1640,
        "wires": []
    },
    {
        "id": "f7ca4af255e6fe49",
        "type": "comment",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "Netdata query end-point",
        "info": "",
        "x": 2380,
        "y": 1880,
        "wires": []
    },
    {
        "id": "731da3a0b3be9123",
        "type": "junction",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "x": 2380,
        "y": 1380,
        "wires": [
            [
                "a753e3c35316e23b"
            ]
        ]
    },
    {
        "id": "a93e8cad1bdf4014",
        "type": "delay",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2735,
        "y": 1940,
        "wires": [
            [
                "a2467b91d154660c"
            ]
        ],
        "l": false
    },
    {
        "id": "e601a80c3e26adca",
        "type": "comment",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "History",
        "info": "2024-12-04:\n - Include in standard application flow\n - Adapted for Netdata v2\n - Restored sensors.html chart\n \n 2023-09-04:\n - Netdata is preinstalled in image file 22 -> removed install nodes from NR flow\n - Netdata menu items added to Aragon main UI under 'Extras'\n\n2023-07-30: \n- Prefixed Netdata uery end-point and data colelction url with '/netdata/'\n- Reduced update frequency, interval set to 5sec (was:1 sec)\n\n2023-07-17: \n- First version",
        "x": 2510,
        "y": 1220,
        "wires": []
    },
    {
        "id": "1d15983fb928d347",
        "type": "exec",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "command": "sudo sed -i 's/^#  sensors: yes/  sensors: no/' /usr/lib/netdata/conf.d/go.d.conf",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Deactivate sensors go plugin",
        "x": 2435,
        "y": 1520,
        "wires": [
            [],
            [],
            []
        ],
        "l": false
    },
    {
        "id": "b5598e78aec86207",
        "type": "exec",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "command": "sudo rm -f /usr/share/netdata/web/sensors.html",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Remove chart html",
        "x": 2475,
        "y": 1540,
        "wires": [
            [],
            [],
            []
        ],
        "l": false
    },
    {
        "id": "679146f79a27377d",
        "type": "exec",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "command": "sudo sed -i 's/sensors: no/sensors: yes/' /usr/lib/netdata/conf.d/python.d.conf",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Activate sensors python plugin",
        "x": 2435,
        "y": 1570,
        "wires": [
            [],
            [],
            []
        ],
        "l": false
    },
    {
        "id": "cf67491449abb00b",
        "type": "delay",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2435,
        "y": 1470,
        "wires": [
            [
                "731da3a0b3be9123"
            ]
        ],
        "l": false
    },
    {
        "id": "c0421b8df1b7bbc7",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "<div> charts </div>",
        "func": "let data = flow.get(\"data\");\nlet html = '';\nlet array = [];\n\nif(data !== undefined){\n    for (let i = 0; i < data.length; ++i )\n    {\n        if(array.includes(data[i].object)){\n            \n        }else{\n            \n            array.push(data[i].object);\n\n            if(data[i].unit===undefined){\n                data[i].unit = \"\";\n            }\n            data[i].unit = data[i].unit.replace('kilo watt per hour', 'kW/h');\n            data[i].unit = data[i].unit.replace('kilo watt par heure', 'kW/h');\n            data[i].unit = data[i].unit.replace('kilo watt', 'kW');\n            data[i].unit = data[i].unit.replace('watt', 'W');\n            data[i].unit = data[i].unit.replace('kilometer per hour', 'km/h');\n            data[i].unit = data[i].unit.replace('°C', 'Celcius');\n            \n            let unitHeader = ' [' + data[i].unit + ']';\n            if (data[i].unit.trim().length===0){\n                unitHeader = ' ';\n            }\n            let header = data[i].object + unitHeader + ' ('+data[i].zone+')';\n            if(data[i].object === data[i].zone){\n                header = data[i].object + ' ' + unitHeader;\n            }\n            let sensorID = data[i].object.toLowerCase().replaceAll(/[ /]/g, \"_\");\n            \n            html = html + '<div style=\"width: 100%; display: inline-block; padding: 10px;\"><b>' + header +'</b>' +\n                '<div data-netdata=\"sensors.'+ sensorID + '\"\\n' + \n                'data-title=\"\"\\n' + \n                'data-chart-library=\"dygraph\"\\n' + \n                'data-width=\"100%\"\\n' +\n                'data-height=\"150\"\\n' + \n                'data-after=\"-3600\"></div>' + '</div>\\n';\n        }\n    }\n    \n}\n\nmsg.payload = html;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2595,
        "y": 1460,
        "wires": [
            [
                "bb3ed98dd4c997c2"
            ]
        ],
        "l": false
    },
    {
        "id": "bb3ed98dd4c997c2",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "sensors.html",
        "func": "let body =  '<!DOCTYPE html>\\n' +\n            '<html lang=\"en\">\\n' +\n            '<head>\\n' +\n              '<title>Netdata Sensors</title>\\n' +\n            \n              '<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\\n' +\n              '<meta charset=\"utf-8\">\\n' +\n              '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\\n' +\n              '<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n' +\n              '<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\\n' +\n              '<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\">\\n' +\n            \n            \n            '</head>\\n' +\n            \n            '<script>\\n' +\n           \n            'var netdataTheme = \"slate\";\\n' +\n\n            '</script>\\n' +\n            '<script type=\"text/javascript\" src=\"dashboard.js\"></script>\\n' +\n            '<!--script type=\"text/javascript\" src=\"dashboard.js?v20190902-0\"></script-->\\n' +\n            \n            '<script>\\n' +\n            \n            'NETDATA.options.current.destroy_on_hide = true;\\n' +\n            \n            'NETDATA.options.current.eliminate_zero_dimensions = true;\\n' +\n            \n            'NETDATA.options.current.concurrent_refreshes = false;\\n' +\n\n            'NETDATA.options.current.parallel_refresher = true;\\n' +\n            \n            'var RELOAD_EVERY = 15;\\n' +\n            'setTimeout(function(){\\n' +\n            '    location.reload();\\n' +\n            '}, RELOAD_EVERY * 60 * 1000);\\n' +\n            \n            '</script>\\n' +\n            \n            '<body>\\n' +\n            \n            '<br>\\n' +\n\t        '<br>\\n' +\n            \t\n        \t'<div style=\"width: 100%; height: 15px; text-align: center; display: inline-block;\">\\n' +\n            '<b>Sensors</b><br>\\n' +\n\t\t\t'LUXORLiving WeatherStation data\\n' +\n            '</div>\\n' +\n            \n            '<br>\\n';\n            \nlet anomalies = '<br><br>\\n' +\n            '<div style=\"width: 100%; height: 15px; text-align: center; display: inline-block;\">\\n' +\n            '<b>Anomalies Anomalies</b><br>\\n' +\n\t\t\t'Anomaly scores relating to key system metrics. A high anomaly probability indicates strange behaviour and may trigger an anomaly prediction from the trained models\\n' +\n            '</div>\\n' +\n            \n            \t'<div data-netdata=\"anomalies_Anomalies.probability\"\\n' +\n            \t\t'data-title=\"Anomaly probability\"\\n' +\n            \t\t'data-chart-library=\"dygraph\"\\n' +\n            \t\t'data-height=\"100%\"\\n' +\n                    'data-after=\"-300\"\\n' +\n            \t'></div>\\n' +\n            \t\n        \t    '<br>\\n' +\n            \n            \t'<div data-netdata=\"anomalies_Anomalies.anomaly\"\\n' +\n            \t\t'data-title=\"Anomaly\"\\n' +\n            \t\t'data-chart-library=\"dygraph\"\\n' +\n            \t\t'data-height=\"100%\"\\n' +\n                    'data-after=\"-300\"\\n' +\n            \t'></div>\\n <br>\\n' ;\n            \t\n            \t\n\nlet sensor = msg.payload;            \n            \t\n            \t\t\t\nlet end =   '</body>\\n' +\n            '</html>\\n';\n            \nlet html = body + sensor + end;\n            \nmsg.payload = html;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2710,
        "y": 1460,
        "wires": [
            [
                "4450a2402235069c"
            ]
        ]
    },
    {
        "id": "63197ed8e088b122",
        "type": "debug",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "/netdata/theben/sensors",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2595,
        "y": 1840,
        "wires": [],
        "l": false
    },
    {
        "id": "4f1087a959d53c7d",
        "type": "debug",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "sensors",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2755,
        "y": 1840,
        "wires": [],
        "l": false
    },
    {
        "id": "3961e5f3d869191e",
        "type": "inject",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "Enable data collection?",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 2390,
        "y": 1280,
        "wires": [
            [
                "0cc868bddc074bb0"
            ]
        ]
    },
    {
        "id": "0cc868bddc074bb0",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "save",
        "func": "var enableDataCollection = msg.payload;\nglobal.get(\"module\").settingsSetValue(\"enableDataCollectionProserv\", enableDataCollection);\n\nif (enableDataCollection === true && global.get(\"module\").settingsGetValue(\"msgGateway\") !== 'proserv') {\n    global.get(\"module\").settingsSetValue(\"enableDataCollectionProserv\", false);\n    node.warn(\"Data collection is restricted to proServ.\");\n    return null;\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2545,
        "y": 1280,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "7bcddd6e122ff67a",
        "type": "function",
        "z": "eb3e4041.662fc8",
        "g": "d5c5fe291dcd0818",
        "name": "data collection enabled?",
        "func": "if (global.get(\"module\").settingsGetValue(\"msgGateway\") !== 'proserv') {\n    node.warn(\"Data collection is restricted to proServ Gateway.\");\n    return;\n}\n\nif (global.get(\"module\").settingsGetValue(\"enableDataCollectionProserv\")){\n    return msg;\n} else {\n    node.warn(\"Data collection is disabled\");\n}\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2365,
        "y": 1520,
        "wires": [
            [
                "1d15983fb928d347",
                "b5598e78aec86207",
                "679146f79a27377d",
                "cf67491449abb00b"
            ]
        ],
        "l": false
    }
]