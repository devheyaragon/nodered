[
    {
        "id": "87bc3606bf879de7",
        "type": "tab",
        "label": "SENSFLOOR DIALOG",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7dd8b0f418252e36",
        "type": "group",
        "z": "87bc3606bf879de7",
        "name": "CONFIGURE DIALOGS & ACTIONS",
        "style": {
            "label": true
        },
        "nodes": [
            "7e55094be424d459",
            "f6d7855569df3fb5",
            "d91a16b150b25d6d"
        ],
        "x": 74,
        "y": 99,
        "w": 492,
        "h": 142
    },
    {
        "id": "cee141ad81748219",
        "type": "group",
        "z": "87bc3606bf879de7",
        "name": "SENSFLOOR EVENTS -> HELP CALL | VOICE DIALOG | SAY",
        "style": {
            "label": true
        },
        "nodes": [
            "904da9e9c020fdaa",
            "0296de22dacff6f1",
            "a31a84ac3b1bd42c",
            "90d65c5466aed9cd",
            "b0a4d51a432272a6",
            "fd7ca2f4edae9b80",
            "7dae6cfcc31e22be",
            "45a62120a04cd849",
            "dee31b46687fc452",
            "a46b63c684d2c83c",
            "cecd63a6f7d3d69a",
            "7c1077f811dfa8b9",
            "3951f66c15bf81d0",
            "c06434267dc4f590",
            "3acfba8464106c9e",
            "b0c0bfadb6397226",
            "4eb3e29f50a0fce0",
            "241bbd1e44ab223a",
            "584b6a06f181569a",
            "e4c0456ed747022b",
            "252e2747f23879c7",
            "22626683d55e97db"
        ],
        "x": 74,
        "y": 279,
        "w": 562,
        "h": 502
    },
    {
        "id": "e3d7e4ab1e613e53",
        "type": "group",
        "z": "87bc3606bf879de7",
        "name": "VOICE DIALOG INPUT -> SEND TO NLU",
        "style": {
            "label": true
        },
        "nodes": [
            "5bcf98a2808a82bf",
            "4daef5b54b4e3b6b",
            "5cb468bfe57221ef",
            "1ddf8fc0e7b1303e",
            "015942eccae11986",
            "3147fe2ff9dd0855",
            "53c9d031a08fade9",
            "5b0b1f20891513fe"
        ],
        "x": 674,
        "y": 279,
        "w": 582,
        "h": 202
    },
    {
        "id": "0d938c4d4a07325c",
        "type": "group",
        "z": "87bc3606bf879de7",
        "name": "SENSFLOOR DEBUG",
        "style": {
            "label": true,
            "fill": "#ffffbf"
        },
        "nodes": [
            "f861b5eade22dd4d",
            "ceee984449b35385",
            "3cb77987c04aeade"
        ],
        "x": 674,
        "y": 99,
        "w": 292,
        "h": 122
    },
    {
        "id": "16f0df21dc301f80",
        "type": "group",
        "z": "87bc3606bf879de7",
        "name": "SENSFLOOR SOCKET.IO > ARAGAON HTTP GET ",
        "style": {
            "label": true
        },
        "nodes": [
            "ed67d97f6372408c",
            "ebde2ec955b472e7",
            "b0a743207d8f1dea",
            "c69db13e135b5c4f",
            "4faf1e864e6aec3b",
            "3a06e9ea85099fb9",
            "9e3bd1e260a308b1",
            "530b9cc77ec4917a",
            "6d63aefaad244920",
            "98c06035046c16dd",
            "0d8ed590cf1faada",
            "15d28c9d980f8b26",
            "6903affbd77b3239"
        ],
        "x": 74,
        "y": 839,
        "w": 712,
        "h": 202
    },
    {
        "id": "f43ad0cbb9970f18",
        "type": "group",
        "z": "87bc3606bf879de7",
        "name": "DISCOVER SENSFLOOR ROOM CONTROLLER",
        "style": {
            "label": true
        },
        "nodes": [
            "4b67812f64068640",
            "6561a91831cff3f3",
            "19b51cb90463afae",
            "42ef084538ac1e56",
            "6e652409558bc0ba",
            "856b55ba54ab0ba0",
            "0fbe681636a6523a",
            "7f6067da061fc9cb",
            "6e264d13995c51ab",
            "26be407822c0bdfd",
            "15a6b0ba61a0005e",
            "e5ebccf0fce72ebc",
            "5a1ef387dfe5e2fb",
            "c8e9ef0c08a013c8",
            "495c2269a6899045",
            "2804dbede5baf49c",
            "f096c57faca55a4f",
            "5b2cfc50d005761d",
            "70c9c4472dcffb08"
        ],
        "x": 74,
        "y": 1099,
        "w": 652,
        "h": 202
    },
    {
        "id": "713cab740f3433b8",
        "type": "group",
        "z": "87bc3606bf879de7",
        "name": "TEST",
        "style": {
            "label": true
        },
        "nodes": [
            "401cf84ede815385",
            "0dcbf0cef9c19e3d",
            "a8563a5c856d8f54",
            "b416de5c9db3572a",
            "52314f952aeb69e1",
            "02bc1652ccb208a1"
        ],
        "x": 74,
        "y": 1359,
        "w": 162,
        "h": 202
    },
    {
        "id": "c06434267dc4f590",
        "type": "junction",
        "z": "87bc3606bf879de7",
        "g": "cee141ad81748219",
        "x": 520,
        "y": 740,
        "wires": [
            [
                "904da9e9c020fdaa",
                "e4c0456ed747022b"
            ]
        ]
    },
    {
        "id": "3acfba8464106c9e",
        "type": "junction",
        "z": "87bc3606bf879de7",
        "g": "cee141ad81748219",
        "x": 540,
        "y": 453,
        "wires": [
            [
                "b0a4d51a432272a6",
                "584b6a06f181569a"
            ]
        ]
    },
    {
        "id": "5bcf98a2808a82bf",
        "type": "function",
        "z": "87bc3606bf879de7",
        "g": "e3d7e4ab1e613e53",
        "name": "Prepare",
        "func": "if(global.get(\"dbgSensFloor\") === true){node.warn(\"Prepare ACTION STRINGS IN: \"+JSON.stringify(msg.payload));}\n\nlet payload = msg.payload;\nmsg.payload = {};\nmsg.payload.input = payload;\nif(msg.siteId !== undefined){\n    msg.payload.siteId = msg.siteId;\n}\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 380,
        "wires": [
            [
                "4daef5b54b4e3b6b"
            ]
        ]
    },
    {
        "id": "4daef5b54b4e3b6b",
        "type": "delay",
        "z": "87bc3606bf879de7",
        "g": "e3d7e4ab1e613e53",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "4",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1095,
        "y": 380,
        "wires": [
            [
                "5cb468bfe57221ef",
                "015942eccae11986"
            ]
        ],
        "l": false
    },
    {
        "id": "5cb468bfe57221ef",
        "type": "debug",
        "z": "87bc3606bf879de7",
        "g": "e3d7e4ab1e613e53",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1195,
        "y": 440,
        "wires": [],
        "l": false
    },
    {
        "id": "1ddf8fc0e7b1303e",
        "type": "comment",
        "z": "87bc3606bf879de7",
        "g": "e3d7e4ab1e613e53",
        "name": "README",
        "info": "Forward the commands (=action strings) to the NLU\n",
        "x": 760,
        "y": 320,
        "wires": []
    },
    {
        "id": "015942eccae11986",
        "type": "mqtt out",
        "z": "87bc3606bf879de7",
        "g": "e3d7e4ab1e613e53",
        "name": "",
        "topic": "hermes/nlu/query",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "53d0bc2c820f9d77",
        "x": 1195,
        "y": 380,
        "wires": [],
        "l": false
    },
    {
        "id": "7e55094be424d459",
        "type": "comment",
        "z": "87bc3606bf879de7",
        "g": "7dd8b0f418252e36",
        "name": "README",
        "info": "# Installation and Configuration of Voice Dialog and Actions with SensFloor\nThis documentation explains how to configure voice dialog with the SensFloor and its corresponding actions. \n\n# Installation \n**All steps are mandatory:**\n1. Aragon Main UI About: Install/confirm Aragon Master v1.5.14 or better\n1. Aragon Main UI: `Node-RED | Set Node-RED password`\n1. Install the SensFloor SE10 room controller and the Aragon Master in the same network.\n1. Install `node-red-contrib-socketio-client-wildcard` from Node-RED Menu | Palette\n1. Download and import the sensfloor-dialog-socketio.json flow from [https://raw.githubusercontent.com/devheyaragon/nodered/main/sensfloor-dialog/sensfloor-dialog-socketio.json](https://raw.githubusercontent.com/devheyaragon/nodered/main/sensfloor-dialog/sensfloor-dialog-socketio.json)\n1. Edit the config node of the Socket.IO Client node and set the URI to `${sensfloor_api}`\n-> The SendFloor room controller will be found automatically (the Socket.IO client node indicates a green dot and 'connected')\n\n# Configuration \n- Open the `ID->ROOM, ACTIONS & DIALOG` node to set how the SensFloor Area ID maps to Aragon siteId/room.\n- Once the area-to-room map is defined and saved, you're ready to test.\n\nYou can then continue to customize the default configuration (e.g. disable room_in, modify the actions, etc)",
        "x": 160,
        "y": 140,
        "wires": []
    },
    {
        "id": "904da9e9c020fdaa",
        "type": "link out",
        "z": "87bc3606bf879de7",
        "g": "cee141ad81748219",
        "name": "speaker out",
        "mode": "link",
        "links": [
            "3bd57099.afbdb8"
        ],
        "x": 595,
        "y": 740,
        "wires": []
    },
    {
        "id": "0296de22dacff6f1",
        "type": "function",
        "z": "87bc3606bf879de7",
        "g": "cee141ad81748219",
        "name": "Prepare to ask if user is OK",
        "func": "global.set(\"helpCallTrigger\",\"floor\");\n\nmsg.payload = msg.payload || {};\n\nmsg.payload.text = msg.payload.text || flow.get(\"fall_query\");\n\nif (!msg.payload.siteId) {\n    msg.payload.siteId = \"Default\";\n    node.error(\"The siteId is undefined\");\n}\n\nif(global.get(\"dbgSensFloor\") === true){node.warn(\"Prepare to ask if user is OK: \"+JSON.stringify(msg.payload));}\n\nmsg.payload = JSON.stringify(msg.payload);\n\nreturn msg;\n    \n\n    \n \n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 415,
        "y": 380,
        "wires": [
            [
                "a31a84ac3b1bd42c"
            ]
        ],
        "icon": "node-red/alert.svg",
        "l": false
    },
    {
        "id": "a31a84ac3b1bd42c",
        "type": "mqtt out",
        "z": "87bc3606bf879de7",
        "g": "cee141ad81748219",
        "name": "proknx/aal/queryuser",
        "topic": "proknx/aal/queryuser",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "53d0bc2c820f9d77",
        "x": 595,
        "y": 380,
        "wires": [],
        "l": false
    },
    {
        "id": "f6d7855569df3fb5",
        "type": "inject",
        "z": "87bc3606bf879de7",
        "g": "7dd8b0f418252e36",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 145,
        "y": 200,
        "wires": [
            [
                "d91a16b150b25d6d"
            ]
        ],
        "l": false
    },
    {
        "id": "d91a16b150b25d6d",
        "type": "function",
        "z": "87bc3606bf879de7",
        "g": "7dd8b0f418252e36",
        "name": "ID->ROOM, ACTIONS & DIALOGS",
        "func": "var module = global.get(\"module\");\nlet language = module.settingsGetValue(\"msgLang\");\n\n\n/******** SENSFLOOR AREA ID TO ROOM ************/\nconst roomList = [\n    { id: '1', name: 'Chambre' },\n    { id: '2', name: 'Chambre' },\n    { id: '3', name: 'Chambre' },\n    { id: '4', name: 'Chambre' },\n    { id: '5', name: 'Chambre' },\n    { id: '6', name: 'Salon' }\n];\nflow.set(\"roomList\", roomList);\n\n\n/************** FALL DETECTION ****************/\nswitch (language) {\n    case \"de\":\n        flow.set(\"fall_query\", \"Wichtige Nachricht! Es sieht so aus, als wären Sie gestürzt, ich solle um Hilfe rufen?\");\n        break;\n    case \"fr\":\n        flow.set(\"fall_query\", \"Message important! il semblerait que vous soyez tombé, dois-je appeler de l'aide ?\");\n        break;\n    default:\n        flow.set(\"fall_query\", \"Important message! it seems like you have fallen, shall I call for help?\");\n}\n\n// Rules:\n// if 'action' is used: \n//    - assign either 'say' or 'dialog' to a value, at least one, but not both\n//    - to disable both 'say' and 'dialog': set 'dialog to 'null' and define 'say' to empty string ('')\n// Disable 'action' by setting it to 'null'\n// \n// Example: here's how to turn on the lights without dialog or say:\n// flow.set(\"room_in_say\", \"\");\n// flow.set(\"room_in_dialog\", null);\n// flow.set(\"room_in_action\", [\"turn on the bedroom lights\"]);\n\n\n/************** ROOM IN ***********************/\nlet use_room_in = true; // Set to false to disable 'room_in' completely\n\nif (use_room_in){\n    flow.set(\"room_in_dialog\", null); // Say something, don't start a voice dialog\n    switch (language) {\n        case \"de\":\n            flow.set(\"room_in_action\", [\"das Licht im Schlafzimmer einschalten\",\"das Licht im Badezimmer einschalten\"]);\n            flow.set(\"room_in_say\", \"Willkommen\");\n            break;\n        case \"fr\":\n            flow.set(\"room_in_action\", [\"allume les lumières de la chambre\"]);\n            flow.set(\"room_in_say\", \"bienvenue\");\n            break;\n        default:\n            flow.set(\"room_in_action\", [\"turn on the bedroom lights\",\"turn on the bathroom lights\"]);\n            flow.set(\"room_in_say\", \"welcome\");\n    }\n} else {\n    flow.set(\"room_in_say\", null);\n    flow.set(\"room_in_dialog\", null);\n    flow.set(\"room_in_action\", null);\n}\n\n/************* ROOM OUT ***********************/\nlet use_room_out = true; // Set to false to disable 'room_out' completely\n\nif (use_room_out){\n    switch (language) {\n        case \"de\":\n            flow.set(\"room_out_action\", [\"schalte das licht aus\"]);\n            flow.set(\"room_out_dialog\", {\n                \"siteId\": \"\",\n                \"textQuery\": \"Möchten Sie, dass ich das Licht ausschalte?\",\n                \"textConfirm\": \"OK, ich schalte das Licht aus!\",\n                \"textCancel\": \"Ich werde das Licht nicht ändern.\",\n                \"defaultAction\": \"Cancel\",\n                \"id\": \"room_out\"\n            });    \n            break;\n        case \"fr\":\n            flow.set(\"room_out_action\", [\"éteindre chambre\"]);\n            flow.set(\"room_out_dialog\", {\n                \"siteId\": \"\",\n                \"textQuery\": \"Voulez-vous que j'éteigne les lumières?\",\n                \"textConfirm\": \"OK, j'éteins les lumières!\",\n                \"textCancel\": \"Je ne changerai pas les lumières.\",\n                \"defaultAction\": \"Cancel\",\n                \"id\": \"room_out\"\n            });    \n            break;\n        default:\n            flow.set(\"room_out_action\", [\"turn off the lights\"]);\n            flow.set(\"room_out_dialog\", {\n                \"siteId\": \"\",\n                \"textQuery\": \"Would you like me to turn off the lights?\",\n                \"textConfirm\": \"OK, turning off the lights!\",\n                \"textCancel\": \"I won't change the lights.\",\n                \"defaultAction\": \"Cancel\",\n                \"id\": \"room_out\"\n            });    \n    }\n    flow.set(\"room_out_say\", null);\n} else {\n    flow.set(\"room_out_say\", null);\n    flow.set(\"room_out_dialog\", null);\n    flow.set(\"room_out_action\", null);\n}\n\n/************* BED IN ************************/\nlet use_bed_in = true; // Set to false to disable 'bed_in' completely\n\nif (use_bed_in){\n    switch (language) {\n        case \"de\":\n            flow.set(\"bed_in_action\", [\"Überall das Licht ausschalten\"]);\n            flow.set(\"bed_in_dialog\", {\n                \"siteId\": \"\",\n                \"textQuery\": \"Möchten Sie, dass ich das Licht ausschalte?\",\n                \"textConfirm\": \"OK, ich schalte das Licht aus!\",\n                \"textCancel\": \"Ich werde das Licht nicht ändern.\",\n                \"defaultAction\": \"Confirm\",\n                \"id\": \"bed_in\"\n            });\n            break;\n        case \"fr\":\n            flow.set(\"bed_in_action\", [\"éteindre les lumières partout\"]);\n            flow.set(\"bed_in_dialog\", {\n                \"siteId\": \"\",\n                \"textQuery\": \"Voulez-vous que j'éteigne les lumières?\",\n                \"textConfirm\": \"OK, j'éteins les lumières!\",\n                \"textCancel\": \"Je ne changerai pas les lumières.\",\n                \"defaultAction\": \"Confirm\",\n                \"id\": \"bed_in\"\n            });\n            break;\n        default:\n            flow.set(\"bed_in_action\", [\"turn off the lights everywhere\"]);\n            flow.set(\"bed_in_dialog\", {\n                \"siteId\": \"\",\n                \"textQuery\": \"Would you like me to turn off the lights?\",\n                \"textConfirm\": \"OK, turning off the lights!\",\n                \"textCancel\": \"I won't change the lights.\",\n                \"defaultAction\": \"Confirm\",\n                \"id\": \"bed_in\"\n            });\n    }\n    flow.set(\"bed_in_say\", null);\n} else {\n    flow.set(\"bed_in_say\", null);\n    flow.set(\"bed_in_dialog\", null);\n    flow.set(\"bed_in_action\", null);\n}\n\n/************* BED OUT ************************/\nlet use_bed_out = true; // Set to false to disable 'bed_out' completely\n\nif (use_bed_out){\n    switch (language) {\n        case \"de\":\n            flow.set(\"bed_out_action\", [\"Licht im Schlafzimmer einschalten\", \"Licht im Flur einschalten\"]);\n            flow.set(\"bed_out_dialog\", {\n                \"siteId\": \"\",\n                \"textQuery\": \"Möchten Sie, dass ich das Licht einschalte?\",\n                \"textConfirm\": \"OK, ich schalte das Licht ein!\",\n                \"textCancel\": \"Ich werde das Licht nicht ändern.\",\n                \"defaultAction\": \"Confirm\",\n                \"id\": \"bed_out\"\n            });\n            break;\n        case \"fr\":\n            flow.set(\"bed_out_action\", [\"allume les lumières de la chambre\", \"allume les lumières de l'entrée\"]);\n            flow.set(\"bed_out_dialog\", {\n                \"siteId\": \"\",\n                \"textQuery\": \"Voulez-vous que j'allume les lumières?\",\n                \"textConfirm\": \"OK, j'allume les lumières!\",\n                \"textCancel\": \"Je ne changerai pas les lumières.\",\n                \"defaultAction\": \"Confirm\",\n                \"id\": \"bed_out\"\n            });\n            break;\n        default:\n            flow.set(\"bed_out_action\", [\"turn on the bathroom lights\", \"turn on the hallway lights\"]);\n            flow.set(\"bed_out_dialog\", {\n                \"siteId\": \"\",\n                \"textQuery\": \"Would you like me to turn on the lights?\",\n                \"textConfirm\": \"OK, turning on the lights!\",\n                \"textCancel\": \"I won't change the lights.\",\n                \"defaultAction\": \"Confirm\",\n                \"id\": \"bed_out\"\n            });\n    }\n    flow.set(\"bed_out_say\",null);\n} else {\n    flow.set(\"bed_out_say\", null);\n    flow.set(\"bed_out_dialog\", null);\n    flow.set(\"bed_out_action\", null);\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "3147fe2ff9dd0855",
        "type": "split",
        "z": "87bc3606bf879de7",
        "g": "e3d7e4ab1e613e53",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 855,
        "y": 380,
        "wires": [
            [
                "5bcf98a2808a82bf"
            ]
        ],
        "l": false
    },
    {
        "id": "53c9d031a08fade9",
        "type": "link in",
        "z": "87bc3606bf879de7",
        "g": "e3d7e4ab1e613e53",
        "name": "DIALOG FINAL IN HANDLER",
        "links": [
            "ee92c7917be74525",
            "252e2747f23879c7"
        ],
        "x": 715,
        "y": 380,
        "wires": [
            [
                "5b0b1f20891513fe"
            ]
        ]
    },
    {
        "id": "5b0b1f20891513fe",
        "type": "function",
        "z": "87bc3606bf879de7",
        "g": "e3d7e4ab1e613e53",
        "name": "FIND THE ACTION STRINGS FOR ID",
        "func": "if(global.get(\"dbgSensFloor\") === true){node.warn(\"FIND THE ACTION STRINGS FOR ID IN: \"+JSON.stringify(msg.payload));}\nif (msg.payload.action !== undefined && msg.payload.id !== undefined) {\n    if(msg.payload.action === \"confirm\" && msg.payload.id.length > 0){\n        let id_action = flow.get(msg.payload.id + \"_action\");\n        if (id_action !== undefined && id_action.length > 0){\n            msg = {};\n            msg.payload = id_action;\n            return msg;\n        }\n    }\n}\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 785,
        "y": 380,
        "wires": [
            [
                "3147fe2ff9dd0855"
            ]
        ],
        "l": false
    },
    {
        "id": "90d65c5466aed9cd",
        "type": "inject",
        "z": "87bc3606bf879de7",
        "g": "cee141ad81748219",
        "name": "(Turn off, defaultAction: Confirm)",
        "props": [
            {
                "p": "payload.siteId",
                "v": "Bedroom",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "x": 365,
        "y": 640,
        "wires": [
            [
                "a46b63c684d2c83c"
            ]
        ],
        "l": false
    },
    {
        "id": "b0a4d51a432272a6",
        "type": "link out",
        "z": "87bc3606bf879de7",
        "g": "cee141ad81748219",
        "name": "DIALOG QUERY USER OUT ",
        "mode": "link",
        "links": [
            "88e0a0f67bb18da4"
        ],
        "x": 595,
        "y": 453,
        "wires": []
    },
    {
        "id": "fd7ca2f4edae9b80",
        "type": "function",
        "z": "87bc3606bf879de7",
        "g": "cee141ad81748219",
        "name": "room_in_dialog",
        "func": "msg.payload = msg.payload || {};\n\nif (!msg.payload.siteId) {\n    msg.payload.siteId = \"Default\";\n    node.error(\"The siteId is undefined\");\n}\n\nlet siteId = msg.payload.siteId;\nlet dialog = flow.get(\"room_in_dialog\");\nif(dialog !== null){\n    msg = {};\n    msg.payload = dialog;\n    msg.payload.siteId = siteId;\n    return [msg, null];\n}\n\nlet say = flow.get(\"room_in_say\");\nif(say !== null){\n    var module = global.get(\"module\");\n    msg = {};\n    msg.payload = module.feedback(module.settingsGetValue(\"msgLang\"), siteId, \"Hello\");\n    msg.payload.text = say;\n    let msgAction = {\n      payload: {\n        action: \"confirm\",\n        id: \"room_in\",\n        siteId: siteId\n      }\n    };\n    return [null, msg, msgAction];\n}",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 415,
        "y": 460,
        "wires": [
            [
                "3acfba8464106c9e"
            ],
            [
                "c06434267dc4f590"
            ],
            [
                "252e2747f23879c7"
            ]
        ],
        "outputLabels": [
            "dialog",
            "say",
            "action"
        ],
        "l": false
    },
    {
        "id": "7dae6cfcc31e22be",
        "type": "inject",
        "z": "87bc3606bf879de7",
        "g": "cee141ad81748219",
        "name": "(Say)",
        "props": [
            {
                "p": "payload.siteId",
                "v": "Chambre",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "x": 355,
        "y": 440,
        "wires": [
            [
                "fd7ca2f4edae9b80"
            ]
        ],
        "l": false
    },
    {
        "id": "45a62120a04cd849",
        "type": "inject",
        "z": "87bc3606bf879de7",
        "g": "cee141ad81748219",
        "name": "(Turn off, defaultAction: Cancel)",
        "props": [
            {
                "p": "payload.siteId",
                "v": "Bedroom",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "x": 355,
        "y": 500,
        "wires": [
            [
                "dee31b46687fc452"
            ]
        ],
        "l": false
    },
    {
        "id": "dee31b46687fc452",
        "type": "function",
        "z": "87bc3606bf879de7",
        "g": "cee141ad81748219",
        "name": "room_out_dialog",
        "func": "msg.payload = msg.payload || {};\n\nif (!msg.payload.siteId) {\n    msg.payload.siteId = \"Default\";\n    node.error(\"The siteId is undefined\");\n}\n\nlet siteId = msg.payload.siteId;\nlet dialog = flow.get(\"room_out_dialog\");\nif(dialog !== null){\n    msg = {};\n    msg.payload = dialog;\n    msg.payload.siteId = siteId;\n    return [msg, null];\n}\n\nlet say = flow.get(\"room_out_say\");\nif(say !== null){\n    var module = global.get(\"module\");\n    msg = {};\n    msg.payload = module.feedback(module.settingsGetValue(\"msgLang\"), siteId, \"Hello\");\n    msg.payload.text = say;\n    let msgAction = {\n      payload: {\n        action: \"confirm\",\n        id: \"room_out\",\n        siteId: siteId\n      }\n    };\n    return [null, msg, msgAction];\n}",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 415,
        "y": 540,
        "wires": [
            [
                "3acfba8464106c9e"
            ],
            [
                "c06434267dc4f590"
            ],
            [
                "252e2747f23879c7"
            ]
        ],
        "outputLabels": [
            "dialog",
            "say",
            "action"
        ],
        "l": false
    },
    {
        "id": "a46b63c684d2c83c",
        "type": "function",
        "z": "87bc3606bf879de7",
        "g": "cee141ad81748219",
        "name": "bed_in_dialog",
        "func": "msg.payload = msg.payload || {};\n\nif (!msg.payload.siteId) {\n    msg.payload.siteId = \"Default\";\n    node.error(\"The siteId is undefined\");\n}\n\nlet siteId = msg.payload.siteId;\nlet dialog = flow.get(\"bed_in_dialog\");\nif(dialog !== null){\n    msg = {};\n    msg.payload = dialog;\n    msg.payload.siteId = siteId;\n    return [msg, null];\n}\n\nlet say = flow.get(\"bed_in_say\");\nif(say !== null){\n    var module = global.get(\"module\");\n    msg = {};\n    msg.payload = module.feedback(module.settingsGetValue(\"msgLang\"), siteId, \"Hello\");\n    msg.payload.text = say;\n    let msgAction = {\n      payload: {\n        action: \"confirm\",\n        id: \"bed_in\",\n        siteId: siteId\n      }\n    };\n    return [null, msg, msgAction];\n}",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 415,
        "y": 600,
        "wires": [
            [
                "3acfba8464106c9e"
            ],
            [
                "c06434267dc4f590"
            ],
            [
                "252e2747f23879c7"
            ]
        ],
        "outputLabels": [
            "dialog",
            "say",
            "action"
        ],
        "l": false
    },
    {
        "id": "cecd63a6f7d3d69a",
        "type": "inject",
        "z": "87bc3606bf879de7",
        "g": "cee141ad81748219",
        "name": "(Turn on, defaultAction: Confirm)",
        "props": [
            {
                "p": "payload.siteId",
                "v": "Bedroom",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "x": 365,
        "y": 740,
        "wires": [
            [
                "7c1077f811dfa8b9"
            ]
        ],
        "l": false
    },
    {
        "id": "7c1077f811dfa8b9",
        "type": "function",
        "z": "87bc3606bf879de7",
        "g": "cee141ad81748219",
        "name": "bed_out_dialog",
        "func": "msg.payload = msg.payload || {};\n\nif (!msg.payload.siteId) {\n    msg.payload.siteId = \"Default\";\n    node.error(\"The siteId is undefined\");\n}\n\nlet siteId = msg.payload.siteId;\nlet dialog = flow.get(\"bed_out_dialog\");\nif(dialog !== null){\n    msg = {};\n    msg.payload = dialog;\n    msg.payload.siteId = siteId;\n    return [msg, null];\n}\n\nlet say = flow.get(\"bed_out_say\");\nif(say !== null){\n    var module = global.get(\"module\");\n    msg = {};\n    msg.payload = module.feedback(module.settingsGetValue(\"msgLang\"), siteId, \"Hello\");\n    msg.payload.text = say;\n    let msgAction = {\n      payload: {\n        action: \"confirm\",\n        id: \"bed_out\",\n        siteId: siteId\n      }\n    };\n    return [null, msg, msgAction];\n}",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 415,
        "y": 700,
        "wires": [
            [
                "3acfba8464106c9e"
            ],
            [
                "c06434267dc4f590"
            ],
            [
                "252e2747f23879c7"
            ]
        ],
        "outputLabels": [
            "dialog",
            "say",
            "action"
        ],
        "l": false
    },
    {
        "id": "3951f66c15bf81d0",
        "type": "inject",
        "z": "87bc3606bf879de7",
        "g": "cee141ad81748219",
        "name": "",
        "props": [
            {
                "p": "payload.siteId",
                "v": "Bedroom",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "x": 355,
        "y": 360,
        "wires": [
            [
                "0296de22dacff6f1"
            ]
        ],
        "l": false
    },
    {
        "id": "b0c0bfadb6397226",
        "type": "http in",
        "z": "87bc3606bf879de7",
        "g": "cee141ad81748219",
        "name": "",
        "url": "/sensfloor",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 360,
        "wires": [
            [
                "4eb3e29f50a0fce0",
                "241bbd1e44ab223a"
            ]
        ]
    },
    {
        "id": "4eb3e29f50a0fce0",
        "type": "function",
        "z": "87bc3606bf879de7",
        "g": "cee141ad81748219",
        "name": "sanity check & id-to-siteId & forward",
        "func": "if(global.get(\"dbgSensFloor\") === true){node.warn(\"/sensfloor got: \"+JSON.stringify(msg.payload));}\n\nif(msg.payload.type === undefined || msg.payload.type.trim().length<3){\n    node.error(\"/sensfloor request without valid type\")\n    return;\n}\n\nconst roomList = flow.get(\"roomList\") || [];\nif (JSON.stringify(roomList) === '[]') {\n    node.warn(\"flow variable roomList is not defined\");\n}\nif (global.get(\"dbgSensFloor\") === true) { node.warn('JSON.stringify(roomList):' + JSON.stringify(roomList)); }\n\nif(msg.payload.id === undefined || msg.payload.id.trim().length<1){\n    node.warn(\"/sensfloor request missing id: \"+ msg.payload.id);\n    msg.payload.siteId = \"Default\";\n} else {\n    const id = msg.payload.id;\n    // Find the room name associated with the id\n    const room = roomList.find(room => room.id === id);\n    \n    // Set the room name in the output message\n    if (room) {\n      msg.payload.siteId = room.name;\n    } else {\n      node.warn(\"/sensfloor no room defined for id: \"+ msg.payload.id);\n      msg.payload.siteId = \"Default\";\n    }\n}\n\nswitch(msg.payload.type){\n    case \"fall\":  return [msg, null, null, null, null];\n    case \"room in\":  return [null, msg, null, null, null];\n    case \"room out\":  return [null, null, msg, null, null];\n    case \"bed in\":  return [null, null, null, msg, null];\n    case \"bed out\":  return [null, null, null, null, msg];\n    default: node.error(\"/sensfloor unhandled type: \"+msg.payload.type)\n    \n}\n",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 175,
        "y": 540,
        "wires": [
            [
                "0296de22dacff6f1"
            ],
            [
                "fd7ca2f4edae9b80"
            ],
            [
                "dee31b46687fc452"
            ],
            [
                "a46b63c684d2c83c"
            ],
            [
                "7c1077f811dfa8b9"
            ]
        ],
        "outputLabels": [
            "fall",
            "room_in",
            "room_out",
            "bed_in",
            "bed_out"
        ],
        "l": false
    },
    {
        "id": "241bbd1e44ab223a",
        "type": "http response",
        "z": "87bc3606bf879de7",
        "g": "cee141ad81748219",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 325,
        "y": 320,
        "wires": [],
        "l": false
    },
    {
        "id": "f861b5eade22dd4d",
        "type": "inject",
        "z": "87bc3606bf879de7",
        "g": "0d938c4d4a07325c",
        "name": "OFF",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 770,
        "y": 180,
        "wires": [
            [
                "3cb77987c04aeade"
            ]
        ]
    },
    {
        "id": "ceee984449b35385",
        "type": "inject",
        "z": "87bc3606bf879de7",
        "g": "0d938c4d4a07325c",
        "name": "ON",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 770,
        "y": 140,
        "wires": [
            [
                "3cb77987c04aeade"
            ]
        ]
    },
    {
        "id": "3cb77987c04aeade",
        "type": "change",
        "z": "87bc3606bf879de7",
        "g": "0d938c4d4a07325c",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "dbgSensFloor",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 925,
        "y": 160,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "584b6a06f181569a",
        "type": "function",
        "z": "87bc3606bf879de7",
        "g": "cee141ad81748219",
        "name": "dbg",
        "func": "if(global.get(\"dbgSensFloor\") === true){node.warn(\"DIALOG QUERY USER OUT: \"+JSON.stringify(msg.payload));}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 595,
        "y": 500,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "e4c0456ed747022b",
        "type": "function",
        "z": "87bc3606bf879de7",
        "g": "cee141ad81748219",
        "name": "dbg",
        "func": "if(global.get(\"dbgSensFloor\") === true){node.warn(\"DIALOG QUERY USER OUT: \"+JSON.stringify(msg.payload));}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 595,
        "y": 700,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "252e2747f23879c7",
        "type": "link out",
        "z": "87bc3606bf879de7",
        "g": "cee141ad81748219",
        "name": "DIALOG FINAL OUT HANDLER",
        "mode": "link",
        "links": [
            "53c9d031a08fade9"
        ],
        "x": 595,
        "y": 580,
        "wires": []
    },
    {
        "id": "3648b46273e92336",
        "type": "comment",
        "z": "87bc3606bf879de7",
        "name": "HISTORY",
        "info": "2024-03-07:\n - Added variable to disable room/bed/in/out\n - Added explainations of 'action && (say || dlg)'\n\n2024-01-29:\n - Scan for SE10 room controllers (port 8000) \n - Requires Aragon Master v1.5.14+\n\n2024-01-18: Listen to socket.io messages from SensFloor.\n - Requires node-red-contrib-socketio-client-wildcard\n - No flow is required on SE10.\n - This is a non-breaking change.\n \n2023-12-07: major changes to handle ID to room look-up. Requires SE10 flow version 2023-12-07",
        "x": 140,
        "y": 60,
        "wires": []
    },
    {
        "id": "22626683d55e97db",
        "type": "inject",
        "z": "87bc3606bf879de7",
        "g": "cee141ad81748219",
        "name": "Test Area ID and 'room in' event",
        "props": [
            {
                "p": "payload.id",
                "v": "2",
                "vt": "str"
            },
            {
                "p": "payload.type",
                "v": "room in",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 135,
        "y": 620,
        "wires": [
            [
                "4eb3e29f50a0fce0"
            ]
        ],
        "l": false
    },
    {
        "id": "ed67d97f6372408c",
        "type": "debug",
        "z": "87bc3606bf879de7",
        "g": "16f0df21dc301f80",
        "name": "debug 27",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 295,
        "y": 880,
        "wires": [],
        "l": false
    },
    {
        "id": "ebde2ec955b472e7",
        "type": "switch",
        "z": "87bc3606bf879de7",
        "g": "16f0df21dc301f80",
        "name": "filter alarms-changed",
        "property": "eventName",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "alarms-changed",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 315,
        "y": 920,
        "wires": [
            [
                "b0a743207d8f1dea",
                "c69db13e135b5c4f"
            ]
        ],
        "l": false
    },
    {
        "id": "b0a743207d8f1dea",
        "type": "debug",
        "z": "87bc3606bf879de7",
        "g": "16f0df21dc301f80",
        "name": "debug 28",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 365,
        "y": 880,
        "wires": [],
        "l": false
    },
    {
        "id": "c69db13e135b5c4f",
        "type": "split",
        "z": "87bc3606bf879de7",
        "g": "16f0df21dc301f80",
        "name": "split alarms array",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 405,
        "y": 920,
        "wires": [
            [
                "4faf1e864e6aec3b",
                "6d63aefaad244920"
            ]
        ],
        "l": false
    },
    {
        "id": "4faf1e864e6aec3b",
        "type": "debug",
        "z": "87bc3606bf879de7",
        "g": "16f0df21dc301f80",
        "name": "debug 29",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 445,
        "y": 880,
        "wires": [],
        "l": false
    },
    {
        "id": "3a06e9ea85099fb9",
        "type": "inject",
        "z": "87bc3606bf879de7",
        "g": "16f0df21dc301f80",
        "name": "test ",
        "props": [
            {
                "p": "payload.state",
                "v": "true",
                "vt": "bool"
            },
            {
                "p": "payload.type",
                "v": "fall",
                "vt": "str"
            },
            {
                "p": "payload.alarmNumber",
                "v": "2",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 330,
        "y": 1000,
        "wires": [
            [
                "6d63aefaad244920"
            ]
        ]
    },
    {
        "id": "9e3bd1e260a308b1",
        "type": "http request",
        "z": "87bc3606bf879de7",
        "g": "16f0df21dc301f80",
        "name": "to Aragon",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 920,
        "wires": [
            [
                "98c06035046c16dd"
            ]
        ]
    },
    {
        "id": "530b9cc77ec4917a",
        "type": "debug",
        "z": "87bc3606bf879de7",
        "g": "16f0df21dc301f80",
        "name": "debug 30",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 545,
        "y": 880,
        "wires": [],
        "l": false
    },
    {
        "id": "6d63aefaad244920",
        "type": "function",
        "z": "87bc3606bf879de7",
        "g": "16f0df21dc301f80",
        "name": "Prepare request to Aragon",
        "func": "if (msg.payload === undefined) {\n    return;\n}\n\nif (msg.payload.state!==undefined && msg.payload.state!==true){\n    return;\n}\n\nlet type = 'unknown';\nlet id = 'unknown';\nlet time = 'unknown';\nlet location = {};\nlet custom = {};\n\nif (msg.payload.type !==undefined)\n    type = msg.payload.type;\nif (msg.payload.alarmNumber !== undefined)\n    id = msg.payload.alarmNumber;\nif (msg.payload.time !== undefined)\n    time = msg.payload.time;\nif (msg.payload.location !== undefined)\n    location = msg.payload.location;\nif (msg.payload.custom !== undefined)\n    custom = msg.payload.custom;\n\nmsg.url = \"http://localhost:1880/sensfloor\";\nmsg.requestTimeout = 5000;\nmsg.url += \n    \"?type=\" + encodeURIComponent(type) + \n    \"&id=\" + encodeURIComponent(id) +\n    \"&time=\" + encodeURIComponent(time) +\n    \"&location=\" + encodeURIComponent(JSON.stringify(location)) +\n    \"&custom=\" + encodeURIComponent(JSON.stringify(custom));\nmsg.method = \"GET\";\nreturn msg;\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 485,
        "y": 920,
        "wires": [
            [
                "9e3bd1e260a308b1",
                "530b9cc77ec4917a"
            ]
        ],
        "l": false
    },
    {
        "id": "98c06035046c16dd",
        "type": "debug",
        "z": "87bc3606bf879de7",
        "g": "16f0df21dc301f80",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 715,
        "y": 880,
        "wires": [],
        "l": false
    },
    {
        "id": "0d8ed590cf1faada",
        "type": "catch",
        "z": "87bc3606bf879de7",
        "g": "16f0df21dc301f80",
        "name": "",
        "scope": "group",
        "uncaught": false,
        "x": 620,
        "y": 1000,
        "wires": [
            [
                "15d28c9d980f8b26"
            ]
        ]
    },
    {
        "id": "15d28c9d980f8b26",
        "type": "debug",
        "z": "87bc3606bf879de7",
        "g": "16f0df21dc301f80",
        "name": "Error sending to Aragon",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 725,
        "y": 1000,
        "wires": [],
        "l": false
    },
    {
        "id": "6903affbd77b3239",
        "type": "socketio-client",
        "z": "87bc3606bf879de7",
        "g": "16f0df21dc301f80",
        "server": "3d5110e93601068d",
        "name": "",
        "x": 180,
        "y": 920,
        "wires": [
            [
                "ebde2ec955b472e7",
                "ed67d97f6372408c"
            ]
        ]
    },
    {
        "id": "15a6b0ba61a0005e",
        "type": "function",
        "z": "87bc3606bf879de7",
        "g": "f43ad0cbb9970f18",
        "name": "Forget",
        "func": "if (global.get(\"dbgSensFloor\") === true) { node.warn(\"Before forget: env.sensfloor_api: \" + global.get('env').sensfloor_api); }\nglobal.get('env').sensfloor_api = \"\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1140,
        "wires": [
            [
                "c8e9ef0c08a013c8"
            ]
        ]
    },
    {
        "id": "4b67812f64068640",
        "type": "function",
        "z": "87bc3606bf879de7",
        "g": "f43ad0cbb9970f18",
        "name": "Create URLs",
        "func": "msg.payload = [];\nlet msgServerIP = global.get(\"module\").settingsGetValue(\"msgServerIP\");\nvar subnet = msgServerIP.substring(0 , msgServerIP.lastIndexOf(\".\") + 1);\nfor(var i = 2; i < 256; i++){\n    msg.payload.push(\"http://\" + subnet + i + \":8000\");\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 303,
        "y": 1200,
        "wires": [
            [
                "6561a91831cff3f3"
            ]
        ],
        "l": false
    },
    {
        "id": "6561a91831cff3f3",
        "type": "split",
        "z": "87bc3606bf879de7",
        "g": "f43ad0cbb9970f18",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 362,
        "y": 1200,
        "wires": [
            [
                "19b51cb90463afae"
            ]
        ],
        "l": false
    },
    {
        "id": "19b51cb90463afae",
        "type": "function",
        "z": "87bc3606bf879de7",
        "g": "f43ad0cbb9970f18",
        "name": "Send URLs to the HTTP-Request node",
        "func": "msg.url = msg.payload;\nmsg.requestTimeout = 3000;\nmsg.rejectUnauthorized = false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 412,
        "y": 1200,
        "wires": [
            [
                "42ef084538ac1e56"
            ]
        ],
        "l": false
    },
    {
        "id": "42ef084538ac1e56",
        "type": "http request",
        "z": "87bc3606bf879de7",
        "g": "f43ad0cbb9970f18",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 463,
        "y": 1200,
        "wires": [
            [
                "6e652409558bc0ba"
            ]
        ],
        "l": false
    },
    {
        "id": "6e652409558bc0ba",
        "type": "function",
        "z": "87bc3606bf879de7",
        "g": "f43ad0cbb9970f18",
        "name": "Manage response and filter for status code 200",
        "func": "var urls = [];\nif(msg.statusCode === 200){\n    try{\n        //node.warn(msg.payload.toLowerCase());\n        if(msg.payload.toLowerCase().includes('sensfloor')){\n            urls.push(msg.url);\n        }\n    }\n    catch(e){\n        node.warn(\"got exception \"+e);\n    }\n}\nmsg.payload = [];\nmsg.payload = urls;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 515,
        "y": 1200,
        "wires": [
            [
                "0fbe681636a6523a"
            ]
        ],
        "l": false
    },
    {
        "id": "856b55ba54ab0ba0",
        "type": "function",
        "z": "87bc3606bf879de7",
        "g": "f43ad0cbb9970f18",
        "name": "Save IP-Addresses",
        "func": "var ips = [];\nfor(var i = 0; i < msg.payload.length; i++) {\n    if(msg.payload[i].length !== 0){\n        ips.push({\"ip\": msg.payload[i][0]});\n    }\n}\nmsg.payload = {};\n\nlet current_ip = global.get('env').sensfloor_api;\nif (global.get(\"dbgSensFloor\") === true) { node.warn(\"Current SensFloor room controller: \" + current_ip); }\n\n\nif (ips.length>1){\n    node.warn(\"More than one SensFloor room controller: \"+JSON.stringify(ips));\n}\nlet restart_flows = false;\nif (ips[0].ip.length>18){\n    if (current_ip){\n        let set_new = false;\n        if(flow.get(\"connection_status\")===false){\n            set_new = true;\n        }\n        if(current_ip.toLowerCase() !== ips[0].ip.toLowerCase()){\n            set_new = true;\n        }\n        if(set_new){\n            node.warn(\"Found new SensFloor room controller: \"+ips[0].ip);\n            global.get('env').sensfloor_api = ips[0].ip;\n            flow.set(\"connection_status\", true);\n            restart_flows = true;\n        } else {\n            if (global.get(\"dbgSensFloor\") === true) { node.warn(\"Found existing SensFloor room controller, no change\"); }            \n        }\n    } else {\n        node.warn(\"Found SensFloor room controller: \" + ips[0].ip);\n        global.get('env').sensfloor_api = ips[0].ip;\n        restart_flows = true;\n    }\n}\n\nif (ips.length===0){\n    node.warn(\"No SensFloor room controller\");\n}\n\nif(restart_flows){\n    return msg;\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 623,
        "y": 1200,
        "wires": [
            [
                "495c2269a6899045"
            ]
        ],
        "l": false
    },
    {
        "id": "0fbe681636a6523a",
        "type": "join",
        "z": "87bc3606bf879de7",
        "g": "f43ad0cbb9970f18",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 567,
        "y": 1200,
        "wires": [
            [
                "856b55ba54ab0ba0"
            ]
        ],
        "l": false
    },
    {
        "id": "7f6067da061fc9cb",
        "type": "catch",
        "z": "87bc3606bf879de7",
        "g": "f43ad0cbb9970f18",
        "name": "",
        "scope": [
            "4b67812f64068640",
            "6561a91831cff3f3",
            "19b51cb90463afae",
            "6e652409558bc0ba",
            "0fbe681636a6523a",
            "856b55ba54ab0ba0"
        ],
        "uncaught": false,
        "x": 170,
        "y": 1260,
        "wires": [
            [
                "6e264d13995c51ab"
            ]
        ]
    },
    {
        "id": "6e264d13995c51ab",
        "type": "debug",
        "z": "87bc3606bf879de7",
        "g": "f43ad0cbb9970f18",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 265,
        "y": 1260,
        "wires": [],
        "l": false
    },
    {
        "id": "26be407822c0bdfd",
        "type": "catch",
        "z": "87bc3606bf879de7",
        "g": "f43ad0cbb9970f18",
        "name": "Dump",
        "scope": [
            "42ef084538ac1e56"
        ],
        "uncaught": false,
        "x": 370,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "e5ebccf0fce72ebc",
        "type": "inject",
        "z": "87bc3606bf879de7",
        "g": "f43ad0cbb9970f18",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 135,
        "y": 1200,
        "wires": [
            [
                "70c9c4472dcffb08"
            ]
        ],
        "l": false
    },
    {
        "id": "5a1ef387dfe5e2fb",
        "type": "inject",
        "z": "87bc3606bf879de7",
        "g": "f43ad0cbb9970f18",
        "name": "Forget & Rescan",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 1140,
        "wires": [
            [
                "15a6b0ba61a0005e"
            ]
        ]
    },
    {
        "id": "c8e9ef0c08a013c8",
        "type": "delay",
        "z": "87bc3606bf879de7",
        "g": "f43ad0cbb9970f18",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 540,
        "y": 1140,
        "wires": [
            [
                "4b67812f64068640"
            ]
        ]
    },
    {
        "id": "401cf84ede815385",
        "type": "function",
        "z": "87bc3606bf879de7",
        "g": "713cab740f3433b8",
        "name": "Set ",
        "func": "global.get('env').sensfloor_api = \"http://192.168.300.12\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 195,
        "y": 1400,
        "wires": [
            [
                "b416de5c9db3572a"
            ]
        ],
        "l": false
    },
    {
        "id": "0dcbf0cef9c19e3d",
        "type": "inject",
        "z": "87bc3606bf879de7",
        "g": "713cab740f3433b8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 135,
        "y": 1400,
        "wires": [
            [
                "401cf84ede815385"
            ]
        ],
        "l": false
    },
    {
        "id": "a8563a5c856d8f54",
        "type": "inject",
        "z": "87bc3606bf879de7",
        "g": "713cab740f3433b8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 135,
        "y": 1460,
        "wires": [
            [
                "b416de5c9db3572a"
            ]
        ],
        "l": false
    },
    {
        "id": "b416de5c9db3572a",
        "type": "function",
        "z": "87bc3606bf879de7",
        "g": "713cab740f3433b8",
        "name": "Get",
        "func": "node.warn(global.get('env').sensfloor_api);",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 195,
        "y": 1460,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "495c2269a6899045",
        "type": "http request",
        "z": "87bc3606bf879de7",
        "g": "f43ad0cbb9970f18",
        "name": "Restart flows",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost/nodered/reload",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 685,
        "y": 1200,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "2804dbede5baf49c",
        "type": "status",
        "z": "87bc3606bf879de7",
        "g": "f43ad0cbb9970f18",
        "name": "",
        "scope": [
            "6903affbd77b3239"
        ],
        "x": 520,
        "y": 1260,
        "wires": [
            [
                "5b2cfc50d005761d"
            ]
        ]
    },
    {
        "id": "f096c57faca55a4f",
        "type": "debug",
        "z": "87bc3606bf879de7",
        "g": "f43ad0cbb9970f18",
        "name": "Connection status",
        "active": false,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 665,
        "y": 1260,
        "wires": [],
        "l": false
    },
    {
        "id": "5b2cfc50d005761d",
        "type": "function",
        "z": "87bc3606bf879de7",
        "g": "f43ad0cbb9970f18",
        "name": "Create URLs",
        "func": "flow.set(\"connection_status\", false);\nif(msg.status.text && msg.status.text.includes(\"connected\")){\n    flow.set(\"connection_status\", true);\n}\nmsg.payload = flow.get(\"connection_status\");\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 615,
        "y": 1260,
        "wires": [
            [
                "f096c57faca55a4f"
            ]
        ],
        "l": false
    },
    {
        "id": "70c9c4472dcffb08",
        "type": "function",
        "z": "87bc3606bf879de7",
        "g": "f43ad0cbb9970f18",
        "name": "Check connection status",
        "func": "if(flow.get(\"connection_status\")===true){\n    if (global.get(\"dbgSensFloor\") === true) { node.warn(\"Check connection status: Skip scan if we're connected.\"); }\n    return null; // Skip scan if we're connected\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 205,
        "y": 1200,
        "wires": [
            [
                "4b67812f64068640"
            ]
        ],
        "l": false
    },
    {
        "id": "52314f952aeb69e1",
        "type": "http request",
        "z": "87bc3606bf879de7",
        "g": "713cab740f3433b8",
        "name": "Restart flows",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://localhost/nodered/reload",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 195,
        "y": 1520,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "02bc1652ccb208a1",
        "type": "inject",
        "z": "87bc3606bf879de7",
        "g": "713cab740f3433b8",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 135,
        "y": 1520,
        "wires": [
            [
                "52314f952aeb69e1"
            ]
        ],
        "l": false
    },
    {
        "id": "53d0bc2c820f9d77",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "3d5110e93601068d",
        "type": "socketio-config",
        "uri": "${sensfloor_api}",
        "options": "{ \"forceNew\": true }"
    }
]